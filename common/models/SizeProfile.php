<?php


namespace common\models;


use common\behaviors\SeoBehavior;

class SizeProfile extends \common\models\generated\models\SizeProfile
{
    public $forceUpdateSeoFields = false;

    public $slug;

    public static $metaTitleDefault = 'Размерный профиль';

    public static $typeDefault = 'female';

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $return = array_merge([
            'seo' => [
                'class' => SeoBehavior::class,
                'titleAttribute' => function () {
                    try {
                        $meta_title = self::$metaTitleDefault;
                        return $meta_title;
                    } catch (\Throwable $e) {
                        \Yii::error($e->getTraceAsString(), __METHOD__);
                    }
                    return null;
                },
                'h1Attribute' => function () {
                    return self::$metaTitleDefault;
                },
                'descriptionAttribute' => function () {
                    return null;
                },
                'forceAttribute' => function () {
                    return $this->forceUpdateSeoFields;
                },
            ],
        ], $behaviors);

        return $return;
    }

    /**
     * @param $attribute
     * @param $defaultValue
     * @return mixed
     */
    public function getSeoValue($attribute, $defaultValue = 'name')
    {
        return $this->seo && $this->seo->{$attribute} ? $this->seo->{$attribute} : self::$metaTitleDefault;;
//        return $this->seo && $this->seo->{$attribute} ? $this->seo->{$attribute} : $this->{$defaultValue};
    }

    /**
     *  Получает заголовок для сео
     */
    public function getSeoTitle()
    {
        return $this->getSeoValue('title');
    }

    /**
     * Получает описанеие для сео
     */
    public function getSeoDescription()
    {
        return $this->getSeoValue('meta_description');
    }

    /**
     * Получает описанеие для сео
     */
    public function getOpenGraphDescription()
    {
        return $this->getSeoValue('meta_description');
    }

    /**
     * todo:: Данный мета тег считается устаревшим
     * @deprecated
     */
    public function getSeoKeywords()
    {
        return $this->getSeoValue('meta_keywords');
    }


    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'user_id' => 'User ID',
            'session_id' => 'Session ID',
            'type' => 'Type',
            'description' => 'Description',
        ];
    }

    public function getParams()
    {
        $return = [];
        $data = $this->getSizeProfileParams()->asArray()->all();
        foreach ($data as $row) {
            $return[] = $row['param_id'];
        }
        return $return;
    }

    public function getUrl()
    {
        return '/size-profile/' . $this->id . '/';
    }

    public function buildTreeIds($profileParams = null)
    {
        $ree_ids = [];

        if (!$profileParams) {
            $profileParams = $this->getParams();
        }

        $query = Product::find()
            ->select([
                Product::tableName() . '.id',
                Product::tableName() . '.tree_id',
            ])
            ->onlyActive()
            ->onlyLot()
            ->groupBy(Product::tableName() . '.id');

        $query->leftJoin(ProductParamProduct::tableName() . ' AS product_param_product_profile',
            'product_param_product_profile.lot_id=' . Product::tableName() . '.id');
        $query->andWhere(['AND', ['IN', 'product_param_product_profile.product_param_id', $profileParams]]);
        $query->andWhere(['not', ['product_param_product_profile.id' => null]]);

        foreach ($query->each() as $product) {
            $ree_ids[$product->tree_id] = $product->tree_id;
        }
        return $ree_ids;
    }

    public function delete()
    {
        foreach ($this->getSizeProfileParams()->each() as $model) {
            $model->delete();
        }
        return parent::delete(); // TODO: Change the autogenerated stub
    }

}