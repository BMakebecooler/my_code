<?php

namespace common\widgets\checkout;

use modules\shopandshow\models\shop\ShopOrder;
use skeeks\cms\base\WidgetRenderable;
use uranum\delivery\DeliveryCalculator;
use uranum\delivery\DeliveryCargoData;
use modules\shopandshow\models\shop\delivery\DeliveryServices;

class Delivery extends WidgetRenderable
{
    const DELIVERY_SERVICE_DEFAULT_ID = 3;
    const DELIVERY_DEFAULT_POSTAL_CODE = 101000; // Москва

    /** @var string  */
    public $viewFile = '@template/widgets/Delivery/checkout';

    /**
     * @var ShopOrder
     */
    public $order;

    /** @var DeliveryServices[] список доступных сервисов для доставки */
    private $services = [];

    /** @var array стоимости доставок */
    private $prices = [];

    /**
     * @inheritdoc
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $components = \Yii::$app->getModule('delivery')->getComponents();

        $this->services = DeliveryServices::find()->where(['code' => array_keys($components)])->indexBy('id')->all();
        $this->prices = $this->calcDeliveryPrices();
    }

    /**
     * Список доступных сервисов для доставки (определяется в конфиге)
     * @return array|DeliveryServices[]|\yii\db\ActiveRecord[]
     */
    public function getDeliveryServices()
    {
        return $this->services;
    }

    /**
     * id текущего выбранного способа доставки
     * @return int
     */
    public function getDeliveryId()
    {
        return \Yii::$app->shop->shopFuser->delivery_id ? $this->getServiceIdByDeliveryId(\Yii::$app->shop->shopFuser->delivery_id) : self::DELIVERY_SERVICE_DEFAULT_ID;
    }

    /**
     * название текущего выбранного способа доставки
     * @return string
     */
    public function getDeliveryName()
    {
        return array_key_exists($this->getDeliveryId(), $this->services) ? $this->services[$this->getDeliveryId()]->name : 'не удалось определить доставщика';
    }

    /**
     * стоимость для текущего выбранного способа доставки
     * @return bool
     */
    public function getDeliveryPrice()
    {
        if (FreeDeliveryWidget::getFreeDeliveryDiscount()) {
            return 0;
        }

        $code = array_key_exists($this->getDeliveryId(), $this->services) ? $this->services[$this->getDeliveryId()]->code : false;
        if (!$code) {
            return false;
        }
        return array_key_exists($code, $this->prices) && $this->prices[$code] ? $this->prices[$code]['cost'] : false;
    }

    /**
     * @return array
     */
    public function getDeliveryPrices()
    {
        return $this->prices;
    }

    /**
     * @param DeliveryServices $model
     * @return mixed
     */
    public function getDeliveryDate($model)
    {
        $data = $this->prices[$model->code] ?? null;
        if (!$data) {
            return 'неизвестно';
        }
        $days = $data['days'] + $data['local_days'];

        return \Yii::$app->formatter->asDate(time() + $days * DAYS_1);
    }

    /**
     * Список цен на доставку для текущей корзины
     * @return array
     */
    private function calcDeliveryPrices()
    {
        $index = \Yii::$app->shop->shopFuser->getProfilePostalCode();

        if (!$index) {
            $index = self::DELIVERY_DEFAULT_POSTAL_CODE;
        }

        if (strlen($index) !== 6) {
            $this->services = [];
            return [];
        }

        $result = $this->calculateResult($index);
        $needNewId = $this->normalizeResult($result);

        // если удалили текущий сервис, выбираем новый
        if ($needNewId && $this->services) {
            reset($this->services);
            \Yii::$app->shop->shopFuser->delivery_id = $this->getDeliveryIdByServiceId(key($this->services));
        }

        return $result;
    }

    /**
     * считает стоимость и время доставки
     * @param $index
     * @return array
     */
    private function calculateResult($index)
    {
        if ($this->order) {
            $weight = $this->order->getWeight() ?: 1000;
            $cartCost = $this->order->money->getValue();
        }
        else {
            $weight = \Yii::$app->shop->shopFuser->getWeightProducts();
            $cartCost = \Yii::$app->shop->shopFuser->money->getValue();
        }

        $services = \Yii::$app->getModule('delivery')->getComponents();
        $data = new DeliveryCargoData($index, '', $cartCost, $weight, 275); // zip, locationTo, cartCost, weight, innerCode (own carrier code)
        $calculator = new DeliveryCalculator($data, $services);
        $result = $calculator->calculate();

        return $result;
    }

    /**
     * преобразует результат в нужный нам вид, удаляет лишние/ошибочные доставки
     * @param $result
     * @return bool
     */
    private function normalizeResult(&$result)
    {
        $freeDelivery = FreeDeliveryWidget::getFreeDeliveryDiscount();
        $localDeliveryDays = \Yii::$app->shop->shopFuser->getDeliveryDays();
        $needNewId = false;

        foreach ($result as $code => &$row) {
            // не удалось рассчитать доставку для выбранного города, удаляем из списка
            if (!$row) {
                unset($result[$code]);

                /** @var DeliveryServices $serviceToRemove */
                $serviceToRemove = array_reduce($this->services, function ($carry, $item) use ($code) {
                    /** @var DeliveryServices $item */
                    if ($code == $item->code) {
                        return $item;
                    }
                    return $carry;
                }, null);

                if ($serviceToRemove) {
                    unset($this->services[$serviceToRemove->id]);

                    if ($this->getDeliveryId() == $serviceToRemove->id) {
                        $needNewId = true;
                    }
                }

                continue;
            }

            $row['cost'] = $freeDelivery ? 0 : \common\helpers\Math::roundingUp($row['cost'], 50);
            $row['days'] = (int)$row['terms'];
            $row['local_days'] = $localDeliveryDays;
        }

        return $needNewId;
    }

    /**
     * @param int $deliveryId
     * @return int
     */
    private function getServiceIdByDeliveryId($deliveryId)
    {
        $deliveryService = DeliveryServices::find()->where(['isActive' => YES_INT])->andWhere(['delivery_id' => $deliveryId])->one();

        if (!$deliveryService) {
            throw new \Exception('delivery service not found by delivery '.$deliveryId);
        }

        return $deliveryService->id;
    }

    /**
     * @param int $serviceId
     * @return int
     */
    private function getDeliveryIdByServiceId($serviceId)
    {
        return DeliveryServices::findOne($serviceId)->delivery_id;
    }
}