<?php
namespace modules\shopandshow\models\newEntities\products;

use common\models\cmsContent\CmsContentElement;
use common\models\CmsContentProperty;
use common\models\ProductProperty;
use console\controllers\queues\jobs\Job;
use modules\shopandshow\lists\Guids;
use modules\shopandshow\models\newEntities\common\CmsContentElementModel;
use yii\helpers\Json;

class PropertyAddList extends CmsContentElementModel
{
    /**
    72D67C21801BC11AE0538201090AB50A Применение -59
    + 72D67C218019C11AE0538201090AB50A Характеристики -60
    + 72D67C21801AC11AE0538201090AB50A Комплектация -61
    + 72D67C21801CC11AE0538201090AB50A Торговые преимущества -62
    72D67C21801DC11AE0538201090AB50A Рекомендации по уходу -63
    72D67C21801EC11AE0538201090AB50A Меры предосторожности -64
    72D67C21801FC11AE0538201090AB50A Состав (неформальное описание) -84
    72D67C218020C11AE0538201090AB50A Состояние лота (неформальное описание) -91
    + 72D67C218021C11AE0538201090AB50A Технические детали -104
    72D67C218022C11AE0538201090AB50A УТП -142
    72D67C218023C11AE0538201090AB50A Наличие в МСК (неформальное описание) -272
    72D67C218024C11AE0538201090AB50A Срок наличия в МСК (неформальное описание) -273
    72D67C218025C11AE0538201090AB50A Срок и условия гарантии -274
    72D67C218026C11AE0538201090AB50A Описание модификаций -275
    72D67C218027C11AE0538201090AB50A Модель (описание) -283
    72D67C218028C11AE0538201090AB50A Результаты тестирования -287
    72D67C21802AC11AE0538201090AB50A Дополнительный критерий выбора 1 -290
    72D67C218029C11AE0538201090AB50A Дополнительный критерий выбора 2 -291
    72D67C21802BC11AE0538201090AB50A Текст для плашек -299
    72D67C21802CC11AE0538201090AB50A Информация для Production -301
    72D67C21802DC11AE0538201090AB50A Условия поставщика (описание) -306
    72D67C21802EC11AE0538201090AB50A Наименование товара -329
    72D67C21802FC11AE0538201090AB50A Описание сроков и условий поставки -502
     */

    /**
     * соответствие гуида свойству
     */
    protected $propsMap = [
        '72D67C218019C11AE0538201090AB50A' => 'HARAKTERISTIKI',
        '72D67C21801AC11AE0538201090AB50A' => 'KOMPLEKTACIA',
        '72D67C21801CC11AE0538201090AB50A' => 'PREIMUSHESTVA',
        '72D67C218021C11AE0538201090AB50A' => 'TECHNICAL_DETAILS',
        ];

    /**
     * соответствие гуида к объекту свойства
     */
    protected $propsMapWithObjects = [];


    public $properties = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        //Так как мы работаем не через названия свойств, то приведем в удобный вид и проиндексируем по коду
        $this->propsMapWithObjects = CmsContentProperty::find()->where(['code' => array_values($this->propsMap)])->indexBy('code')->all();
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'guid' => 'Глобальный идентификатор',
        ];
    }

    public function setCmsContentElement(CmsContentElement $contentElement)
    {
        $this->cmsContentElement = $contentElement;

        $this->setAttributes([
            'guid' => $contentElement->guid->getGuid(),
        ]);
    }

    public function setPropertyList(array $propertyList = [])
    {
        $this->properties = $propertyList;
    }

    /**
     * @return bool
     */
    public function addData()
    {

        if (!$this->properties) {
            Job::dump(' empty properties list');

            return true;
        }

        $propertiesCollection = [];

        foreach ($this->properties as $property) {
            Job::dump('------');
            Job::dump('PropTypeGuid: '.($property['PropTypeGuid'] ?: "EMPTY (use as TECH_DETAILS/PROPS_COLLS)"));
            Job::dump('PropValue: '.$property['PropValue']);

            //* PropertiesCollection *//

            //У коллекции свойств своя специфика, так что значения свойств этого типа собираем отдельно, группируем и сохраняем именно группой в 1 поле
            //Если не будет записей для коллекции свойств, считаем что их очистили и надо чистить у себя?

            if (!$property['PropTypeGuid']){
                $propertiesCollection[] = [
                    'PropertyName' => $property['PropName'],
                    'PropertyValue' => $property['PropValue'],
                ];
            }

            //* /PropertiesCollection *//

            if (array_key_exists($property['PropTypeGuid'], $this->propsMap)) {
                //Данный тип свойств мы принимаем
                $propertyCode = $this->propsMap[$property['PropTypeGuid']];

                //Свойство по коду нашлось
                if (!empty($this->propsMapWithObjects[$propertyCode])){
                    /** @var CmsContentProperty $cmsContentProperty */
                    $cmsContentProperty = $this->propsMapWithObjects[$propertyCode];
                    Job::dump("PropInfo: {$cmsContentProperty->name} [{$cmsContentProperty->code}]");

                    //Проверяем, есть ли такое свойство для  текущего товара
                    $productProperty = ProductProperty::getElementProperty($this->cmsContentElement->id, $cmsContentProperty->id);

                    if (!$productProperty){
                        $productProperty = new ProductProperty();
                        $productProperty->element_id = $this->cmsContentElement->id;
                        $productProperty->property_id = $cmsContentProperty->id;

                        Job::dump(" >new prop for product");
                    }

                    //Значение для данного свойства
                    $propertyValue = $this->getValueByProp($property);

                    //Проверяем, если свойства для товара не новое - сохраняем в любом случае
                    //Если свойство для товара новое и для него пришло пустое значение - не добавляем/сохраняем
                    if (!$productProperty->isNewRecord || ($productProperty->isNewRecord && $propertyValue)){
                        $productProperty->value = $propertyValue;

                        if (!$productProperty->save()){
                            Job::dump("Error saving product prop. Msg = " . var_export($productProperty->getErrors(), true));
                        }
                    }else{
                        Job::dump("Skip saving prop");
                    }

                }else{
                    //error, Свойство не найдено
                    Job::dump("Cant find prop with code '{$propertyCode}'");
                }


                //$this->relatedPropertiesModel[$this->propsMap[$property['PropTypeGuid']]] = $this->getValueByProp($property);
            }else{
                //skip property
            }
        }

        //* PropertiesCollection *//

        //Все свойства перебрали, все значения для коллекции свойств собрали, сохраняем

        $techDetailsProp = CmsContentProperty::findByCode('TECHNICAL_DETAILS');
        $elementProperty = ProductProperty::getElementProperty($this->cmsContentElement->id, $techDetailsProp->id);

        //Кейсы
        //1) Значение свойства есть - обычная схема, создаем и записываем свойство или используем если уже создано и есть
        //2) Значения нет - если свойство уже есть - удаляем, если нет его - ничего не делаем

        Job::dump("PropertiesCollection elements count: " . count($propertiesCollection));

        if ($propertiesCollection){
            if (!$elementProperty){
                $elementProperty = new ProductProperty();
                $elementProperty->element_id = $this->cmsContentElement->id;
                $elementProperty->property_id = $techDetailsProp->id;
            }

            $elementProperty->value = Json::encode($propertiesCollection);

            if (!$elementProperty->save()){
                \Yii::error("ProductID={$this->cmsContentElement->id}, error save element property. Error: " . var_export($elementProperty->getErrors(), true), 'modules\shopandshow\models\newEntities\products\PropertiesCollectionList\addData');
            }
        }else{
            if ($elementProperty){
                $elementProperty->delete();
            }
        }

        //* /PropertiesCollection *//

        // check if correct
        return true;
    }

    /**
     * @param array $property
     *
     * @return string
     */
    public function getValueByProp(array $property)
    {
        if($property['PropValue'] == 'N') {
            $value = '';
        } else {
            $value = $property['PropValue'];
        }

        /*if (!empty($property['ItemGuid'])) {
            // @var $item \common\models\cmsContent\CmsContentElement
            if (!$item = Guids::getEntityByGuid($property['ItemGuid'])) {
                Job::dump(' cant find item');
                return null;
            }
            $value = $item->id;
        }*/
        return (string)$value;
    }
}