<?php
/**
 * Created by PhpStorm.
 * User: nikitaignatenkov
 * Date: 21/12/2018
 * Time: 16:59
 */

namespace modules\shopandshow\components\export;


use Box\Spout\Common\Type;
use Box\Spout\Writer\WriterFactory;
use common\helpers\ArrayHelper;
use common\interfaces\Export;
use common\models\cmsContent\CmsContentElement;
use common\models\NewProduct;
use common\models\Tree;
use skeeks\cms\exportShopYandexMarket\ExportShopYandexMarketHandler as SXExportShopYandexMarketHandler;
use skeeks\cms\models\CmsTree;
use yii\helpers\FileHelper;


class ExportShopYandex2Handler extends YandexHandler implements Export
{

    public function init()
    {

        parent::init(); // TODO: Change the autogenerated stub
        $this->name = 'Выгрзка для beru.ru';
    }

    public function getProductQuery()
    {

        return parent::getProductQuery()
            ->andWhere(['not in', 'cms_content_element.tree_id', $this->_getExcludedCategoriesIds()]);
    }

    public function _getExcludedCategoriesIds()
    {
        $excludeCategories = [
            1626,
            1649,
        ];

        $excludeCategoriesSubs = [];
        if ($excludeCategories) {
            foreach ($excludeCategories as $excludeCategoryId) {
                $tree = CmsTree::findOne($excludeCategoryId);

                if ($tree) {
                    $treeSubs = $tree->getDescendants()->orderBy(['level' => SORT_ASC])->all();
                    if ($treeSubs) {
                        /** @var Tree $treeSub */
                        foreach ($treeSubs as $treeSub) {
                            $excludeCategoriesSubs[] = $treeSub->id;
                        }
                    }
                }

            }
        }

        return ArrayHelper::merge($excludeCategories, $excludeCategoriesSubs);
    }

    public function export()
    {

        $this->result->stdout("\tSKIP\n");
        return $this->result;

        //TODO: if console app
        \Yii::$app->urlManager->baseUrl = $this->base_url;
        \Yii::$app->urlManager->scriptUrl = $this->base_url;

        ini_set("memory_limit", "8192M");
        set_time_limit(0);

        //Создание дирректории
        if ($dirName = dirname($this->rootFilePath)) {
            $this->result->stdout("Создание дирректории\n");
            $this->result->stdout($this->rootFilePath . "Создание дирректории\n");

            if (!is_dir($dirName) && !FileHelper::createDirectory($dirName)) {
                throw new \Exception("Не удалось создать директорию для файла");
            }
        }


        $writer = WriterFactory::create(Type::XLSX); // for XLSX files
//$writer = WriterFactory::create(Type::CSV); // for CSV files
//$writer = WriterFactory::create(Type::ODS); // for ODS files

        $writer->openToFile($this->rootFilePath); // write data to a file or to a PHP stream
//$writer->openToBrowser($fileName); // stream data directly to the browser

        foreach ($this->getProductQuery()->each() as $blockElement) {
            /** @var NewProduct $blockElement */

            $categoryName = CmsTree::findOne($blockElement->getCategoryId())->name;
            $writer->addRow([
                $blockElement->id,
                $blockElement->name,
                $categoryName = $categoryName,
                $blockElement->getBrandName(),
                '',
                '',
                $blockElement->getPublicUrl(),
                $blockElement->description_short,
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                $blockElement->getCurrentPrice(),
                '',
                ''
            ]); // add a row at a time
        }
//        $writer->addRows($multipleRows); // add multiple rows at a time

        $writer->close();
    }

    public function getNameForCPC()
    {
        // TODO: Implement getNameForCPC() method.
    }
}