<?php

namespace modules\shopandshow\components\export;


use common\helpers\ArrayHelper;
use common\helpers\Category;
use common\helpers\Color;
use common\helpers\Common;
use common\helpers\Feed;
use common\helpers\Url;
use common\interfaces\ExportType;
use common\models\CmsContentElementProperty;
use common\models\generated\models\CmsStorageFile;
use common\models\NewProduct;
use common\models\Product;
use common\models\ProductParam;
use common\models\Tree;
use Exception;
use skeeks\cms\components\Cms;
use skeeks\cms\helpers\FileHelper;
use skeeks\cms\mail\helpers\Html;
use skeeks\cms\models\CmsTree;
use function foo\func;

class YandexHandler extends BaseHandler implements ExportType
{
    private $unloadedTreeIds = [];

    private $treeModels = [];

    public static $minDiscountPercent = 5;
    public static $maxDiscountPercent = 95;

    //todo включить отключить ресайз картинок для Floktory
    public static $enableFloktoryResize = true;

//    public static $enableFloktoryResize = true;

    public function init()
    {
        static::initTimer("init");

        parent::init(); // TODO: Change the autogenerated stub
        $this->name = 'Yandex Export';


        if (!$this->file_path) {
            $this->file_path = "/export/yandex/feed.xml";
        }

        $queryTrees = Tree::find();
        foreach ($queryTrees->each() as $tree) {
            $this->treeModels[$tree->id] = $tree;
        }
        static::showTimer("init");
    }

    public function getNameType()
    {
        return 'yandex';
    }

    public function export()
    {
        static::initTimer("export");

        //TODO: if console app
        \Yii::$app->urlManager->baseUrl = $this->base_url;
        \Yii::$app->urlManager->scriptUrl = $this->base_url;

        ini_set("memory_limit", "8192M");
        set_time_limit(0);

        //Создание дирректории
        if ($dirName = dirname($this->rootFilePath)) {
            $this->result->stdout("Создание дирректории\n");

            if (!is_dir($dirName) && !FileHelper::createDirectory($dirName)) {
                throw new \Exception("Не удалось создать директорию для файла");
            }
        }

        $imp = new \DOMImplementation();
        $dtd = $imp->createDocumentType('yml_catalog', '', "shops.dtd");
        $xml = $imp->createDocument('', '', $dtd);
        $xml->encoding = 'utf-8';
        //$xml->formatOutput = true;

        $yml_catalog = $xml->appendChild(new \DOMElement('yml_catalog'));
        $yml_catalog->appendChild(new \DOMAttr('date', date('Y-m-d H:i:s')));

        $this->result->stdout("\tДобавление основной информации\n");

        $shop = $yml_catalog->appendChild(new \DOMElement('shop'));

        $shop->appendChild(new \DOMElement('name', $this->shop_name ? htmlspecialchars($this->shop_name) : htmlspecialchars(\Yii::$app->name)));
        $shop->appendChild(new \DOMElement('company', $this->shop_company ? htmlspecialchars($this->shop_company) : htmlspecialchars(\Yii::$app->name)));
        $shop->appendChild(new \DOMElement('email', htmlspecialchars('supervisors@shopandshow.ru')));
        $shop->appendChild(new \DOMElement('url', htmlspecialchars(
            $this->base_url
        )));


        $this->_appendCurrencies($shop);
        $this->_appendCategories($shop);

        static::showTimer("export");

        $this->_appendOffersArray($shop);


        static::initTimer("save_file");
        $xml->formatOutput = true;
        $xml->save($this->rootFilePath);
        static::showTimer("save_file");


        return $this->result;
    }


    /**
     * @param \DOMElement $shop
     *
     * @return $this
     */
    public function _appendCategories(\DOMElement $shop)
    {
        /**
         * @var CmsTree $rootTree
         * @var CmsTree $tree
         */
        $rootTree = CmsTree::findOne($this->tree_id);

        $this->result->stdout("\tВставка категорий\n");

        if ($rootTree) {


            $xcategories = $shop->appendChild(new \DOMElement('categories'));

            $trees = $rootTree->getDescendants()->andWhere(['active' => Cms::BOOL_Y])->orderBy(['level' => SORT_ASC])->all();
            $trees = ArrayHelper::merge([$rootTree], $trees);
            foreach ($trees as $tree) {

                if (in_array($tree->id, $this->_getExcludedCategoriesIds())) {
                    continue;
                }

                $xcurr = $xcategories->appendChild(new \DOMElement('category', $tree->name));
                $xcurr->appendChild(new \DOMAttr('id', $tree->id));
                if ($tree->parent && $tree->id != $rootTree->id) {
                    $xcurr->appendChild(new \DOMAttr('parentId', $tree->parent->id));
                }
                $this->unloadedTreeIds[$tree->id] = $tree->id;
            }
        }

    }

    /**
     * работает в десятки раз быстрее, чем старый метод
     * @param \DOMElement $shop
     *
     * @return $this
     */
    public function _appendOffersArray(\DOMElement $shop)
    {
        $xoffers = $shop->appendChild(new \DOMElement('offers'));

        static::initTimer("calculate_all_records");

        $analyticsProductsForFeed = $this->getAnalyticsProductsForFeedArray();

        $countAll = $this->getProductQuery()
            ->addGroupBy(Product::tableName() . '.id')
            ->andWhere(['lot.code' => array_keys($analyticsProductsForFeed)])
            ->count();

        static::showTimer("calculate_all_records");

        $count = 0;

        for ($i = 0; $i < ceil($countAll / $this->partSize); $i++) {

            static::initTimer("write_part_items_to_file");

            $command = $this->getProductQuery()
                ->select([
                    Product::tableName() . '.*',
                    'lot.name AS lot_name',
                    'lot.new_brand_id AS lot_new_brand_id',
                    'lot.tree_id AS lot_tree_id',
                    'lot.new_lot_num AS lot_new_lot_num',
                    'lot.image_id AS lot_image_id',
                    'card_storage_file.cluster_file AS image',
                    'lot_storage_file.cluster_file AS parent_image',
                    'lot.new_product_kit AS lot_new_product_kit',
                    'color_main.value AS color_main_id',
                    'color_bx.value AS color_bx_id',
                    'tech_details.value as tech_details'
                ])
                ->leftJoin(CmsStorageFile::tableName() . ' AS card_storage_file',
                    'card_storage_file.id=' . Product::tableName() . '.image_id')
                ->leftJoin(CmsStorageFile::tableName() . ' AS lot_storage_file',
                    'lot_storage_file.id=lot.image_id')
                ->leftJoin(CmsContentElementProperty::tableName() . ' AS color_main',
                    'color_main.element_id=' . Product::tableName() .
                    '.id AND color_main.property_id=' . Color::COLOR_MAIN_PROPERTY_ID)
                ->leftJoin(CmsContentElementProperty::tableName() . ' AS color_bx',
                    'color_bx.element_id=' . Product::tableName() .
                    '.id AND color_bx.property_id=' . Color::COLOR_BX_PROPERTY_ID)
                ->leftJoin(CmsContentElementProperty::tableName() . ' AS tech_details',
                    'tech_details.element_id=lot.id AND tech_details.property_id=' .
                    CmsContentElementProperty::TECH_DETAILS_PROPERTY_ID)
                ->andWhere(['lot.code' => array_keys($analyticsProductsForFeed)])
                ->limit($this->partSize)
                ->offset($i * $this->partSize)
                ->createCommand();

            $rows = $command->queryAll();

            foreach ($rows as $element) {

                if ($this->isArrForFeedByAnalytics($element)) {
                    static::initTimer("generate_yandex_feed_element");
                    $this->_initOfferArray($xoffers, $element);
//                    static::showTimer("generate_yandex_feed_element");

                    $count++;
                }
            }

            static::showTimer("write_part_items_to_file");

        }

        echo $count . ' товаров добавлено в фид' . PHP_EOL;
    }


    /**
     * @param \DOMElement $shop
     *
     * @return $this
     */
    public function _appendOffersArrayOld(\DOMElement $shop)
    {
        $xoffers = $shop->appendChild(new \DOMElement('offers'));
        foreach ($this->getProductQuery()->each() as $k => $element) {
            if ($this->isForFeedByAnalytics($element)) {
                $this->_initOfferArray($xoffers, $element);
            }
        }
    }

    private function _addPriceParams(\DOMNode &$xoffer, array $element)
    {
        if ($element['new_price'] < $element['new_price_old']) {
            if ($element['new_discount_percent'] >= self::$minDiscountPercent && $element['new_discount_percent'] <= self::$maxDiscountPercent) {
                $xoffer->appendChild(new \DOMElement('price', round($element['new_price'], 1)));
                $xoffer->appendChild(new \DOMElement('oldprice', round($element['new_price_old'], 1)));
            } else {
                $xoffer->appendChild(new \DOMElement('price', round($element['new_price'], 1)));
            }
        } else {
            $xoffer->appendChild(new \DOMElement('price', round($element['new_price'], 1)));
        }
    }

    private function _addPriceParamsOld(\DOMNode &$xoffer, Product $element)
    {
        if ($element->hasDiscount()) {
            if ($element->new_discount_percent >= self::$minDiscountPercent && $element->new_discount_percent <= self::$maxDiscountPercent) {
                $xoffer->appendChild(new \DOMElement('price', round($element->new_price, 1)));
                $xoffer->appendChild(new \DOMElement('oldprice', round($element->new_price_old, 1)));
            } else {
                $xoffer->appendChild(new \DOMElement('price', round($element->new_price, 1)));
            }
        } else {
            $xoffer->appendChild(new \DOMElement('price', round($element->new_price, 1)));
        }
    }

    private function _addDeliveryParams(\DOMNode &$xoffer)
    {
        if ($this->default_delivery) {
            if ($this->default_delivery == 'Y') {
                $xoffer->appendChild(new \DOMElement('delivery', 'true'));
            } else if ($this->default_delivery == 'N') {
                $xoffer->appendChild(new \DOMElement('delivery', 'false'));
            }
        }

        if ($this->default_store) {
            if ($this->default_store == 'Y') {
                $xoffer->appendChild(new \DOMElement('store', 'true'));
            } else if ($this->default_store == 'N') {
                $xoffer->appendChild(new \DOMElement('store', 'false'));
            }
        }

        if ($this->default_pickup) {
            if ($this->default_pickup == 'Y') {
                $xoffer->appendChild(new \DOMElement('pickup', 'true'));
            } else if ($this->default_pickup == 'N') {
                $xoffer->appendChild(new \DOMElement('pickup', 'false'));
            }
        }
    }

    private function _addPropParams(\DOMNode $xoffer, array $props = [])
    {
        if ($props && count($props)) {
            foreach ($props as $prop) {
                if (!empty($prop['PropertyValue'])) {
                    $param = $xoffer->appendChild(new \DOMElement('param', htmlspecialchars($prop['PropertyValue'])));
                    $param->setAttribute('name', htmlspecialchars($prop['PropertyName']));
                }
            }
        }
    }

    private function _addOfferAttributes(\DOMNode $xoffer, array $element)
    {
        $xoffer->appendChild(new \DOMAttr('id', $element['id']));
        $xoffer->appendChild(new \DOMAttr('type', 'vendor.model'));
        $xoffer->appendChild(new \DOMAttr('available', $element['new_quantity'] > 0 ? 'true' : 'false'));
    }

    private function _addOfferAttributesOld(\DOMNode $xoffer, Product $element)
    {
        $xoffer->appendChild(new \DOMAttr('id', $element->id));
        $xoffer->appendChild(new \DOMAttr('type', 'vendor.model'));
        $xoffer->appendChild(new \DOMAttr('available', $element->new_quantity > 0 ? 'true' : 'false'));
    }

    private function _initOfferArrayOther(\DOMNode $xoffers, array $element, $mode = 'simple')
    {
        $nameForFeed = $element['lot_name'] ?? $element['name'];

        $model = [];
        $typePrefix = [];
        $kit = explode(' ', $nameForFeed);
        foreach ($kit as $word) {
            $wordRus = preg_replace('/[^а-яА-Я]/ui', '', $word);
            if ($wordRus && strlen($wordRus) > 1) {
                $typePrefix[] = $wordRus;
            }
            $wordEng = preg_replace('/[^a-zA-Z0-9]/ui', '', $word);
            if ($wordEng && strlen($wordEng) > 1) {
                $model[] = $wordEng;
            }
        }

        $typePrefix = implode(' ', $typePrefix);
        $model = implode(' ', $model);

        $brandName = static::$brands[$element['lot_new_brand_id']] ?? null;

//        $brandName = $element->brand ? Html::encode($element->brand->name) : false;
        $model = str_replace(
            [$brandName, mb_strtoupper($brandName), mb_strtolower($brandName)],
            '',
            $model);

        //Проверка есть ли в строке буквы или цифры
        if (!preg_match("/^[a-zа-яё\d]{1}[a-zа-яё\d\s]*[a-zа-яё\d]{1}$/i", $model)) {
            $model = $brandName;
        }

        if (!$model || !$brandName || !$typePrefix) {
            return false;
        }

        $xoffer = $xoffers->appendChild(new \DOMElement('offer'));
        $this->_addOfferAttributes($xoffer, $element);
        $this->_addNameParams($xoffer, $typePrefix, $brandName, $model);
        $this->_addMainParams($xoffer, $element);
        $this->_addPriceParams($xoffer, $element);

        $characteristics = $this->getCharacteristics($element['tech_details']);

        if ($mode == 'electrical') {
            $param = $xoffer->appendChild(new \DOMElement('param', htmlspecialchars($nameForFeed)));
            $param->setAttribute('name', 'Код ETIM');
        }
        if (is_array($characteristics) && count($characteristics)) {
            $this->_addPropParams($xoffer, $characteristics);
        }

        return $this;

    }

    private function _initOfferArrayOtherOld(\DOMNode $xoffers, Product $element, $mode = 'simple')
    {
        //Что бы не переписывать через чур много пока будем использовать местами старую модельку
        $elementOld = NewProduct::findOne($element->id);

        $nameForFeed = $elementOld->getNameForFeed();

        $model = [];
        $typePrefix = [];
        $kit = explode(' ', $nameForFeed);
        foreach ($kit as $word) {
            $wordRus = preg_replace('/[^а-яА-Я]/ui', '', $word);
            if ($wordRus && strlen($wordRus) > 1) {
                $typePrefix[] = $wordRus;
            }
            $wordEng = preg_replace('/[^a-zA-Z0-9]/ui', '', $word);
            if ($wordEng && strlen($wordEng) > 1) {
                $model[] = $wordEng;
            }
        }

        $typePrefix = implode(' ', $typePrefix);
        $model = implode(' ', $model);
        $brandName = $element->brand ? Html::encode($element->brand->name) : false;
        $model = str_replace(
            [$brandName, mb_strtoupper($brandName), mb_strtolower($brandName)],
            '',
            $model);

        //Проверка есть ли в строке буквы или цифры
        if (!preg_match("/^[a-zа-яё\d]{1}[a-zа-яё\d\s]*[a-zа-яё\d]{1}$/i", $model)) {
            $model = $brandName;
        }

        if (!$model || !$brandName || !$typePrefix) {
            return false;
        }

        $xoffer = $xoffers->appendChild(new \DOMElement('offer'));

        $this->_addOfferAttributes($xoffer, $element);
        $this->_addNameParams($xoffer, $typePrefix, $brandName, $model);
        $this->_addMainParams($xoffer, $element, $elementOld);

        $technicalDetail = $elementOld->relatedPropertiesModel->getAttribute('HARAKTERISTIKI');
        $props = $element->lot->getCharacteristics(false);

        if ($technicalDetail) {
            $xoffer->appendChild(new \DOMElement('description', $technicalDetail));
        }

        $this->_addPriceParams($xoffer, $element);

        if ($technicalDetail) {
            $xoffer->appendChild(new \DOMElement('description', $technicalDetail));
        }

        if ($mode == 'electrical') {
            $param = $xoffer->appendChild(new \DOMElement('param', htmlspecialchars($elementOld->getNameForFeed())));
            $param->setAttribute('name', 'Код ETIM');
        }
        if (is_array($props) && count($props)) {
            $this->_addPropParams($xoffer, $props);
        }

        return $this;
    }

    private function _addNameParams(\DOMNode &$xoffer, $typePrefix, $brandName, $model)
    {
        if (!$model || !$brandName || !$typePrefix) {
            return false;
        }

        $xoffer->appendChild(new \DOMElement('typePrefix', htmlspecialchars(ltrim(rtrim($typePrefix)))));
        $xoffer->appendChild(new \DOMElement('vendor', htmlspecialchars(ltrim(rtrim($brandName)))));
        $xoffer->appendChild(new \DOMElement('model', htmlspecialchars(ltrim(rtrim($model)))));

        return true;
    }

    private function _addMainParams(\DOMNode &$xoffer, array $element)
    {
        $url = Url::getUrlCardForFeed($element, $element['lot_new_lot_num']);
        $picture = Url::getUrlImageForFeed($element);

        if ($element['lot_new_lot_num']) {
            $xoffer->appendChild(new \DOMElement('barcode', preg_replace("/[^0-9]/", '', $element['lot_new_lot_num'])));
        }

        if ($picture) {
            $xoffer->appendChild(new \DOMElement('picture', $picture));
        }

        $categoryId = $element['lot_tree_id'] ?? $element['tree_id'];
        if (!in_array($categoryId, $this->unloadedTreeIds)) {
            $categoryId = Category::$rootCategoryId;
        }

        $xoffer->appendChild(new \DOMElement('currencyId', 'RUR'));
        $xoffer->appendChild(new \DOMElement('categoryId', $categoryId));
        $xoffer->appendChild(new \DOMElement('url', htmlspecialchars($url)));

        return true;
    }

    private function _addMainParamsOld(\DOMNode &$xoffer, Product $element, NewProduct $elementOld)
    {
        $picture = $elementOld->getStorageFile();
        if ($element->lot->new_lot_num) {
            $xoffer->appendChild(new \DOMElement('barcode', preg_replace("/[^0-9]/", '', $element->lot->new_lot_num)));
        }

        if ($picture) {
            $xoffer->appendChild(new \DOMElement('picture', $picture));
        }

        $categoryId = $elementOld->getCategoryId();
        if (!in_array($categoryId, $this->unloadedTreeIds)) {
            $categoryId = Category::$rootCategoryId;
        }

        $xoffer->appendChild(new \DOMElement('currencyId', 'RUR'));
        $xoffer->appendChild(new \DOMElement('categoryId', $categoryId));
        $xoffer->appendChild(new \DOMElement('url', htmlspecialchars(Url::createUrlForFeed($elementOld, $this))));

        return true;
    }

    private function _initOfferArrayModaFootOld(\DOMNode $xoffers, Product $element, $mode = 'moda')
    {
        //Разбиваем на модификации
        $modifications = Product::getProductOffers($element->id, true);
        if (!$modifications) {
            return null;
        }

        if (!$element->brand || !$element->lot->new_product_kit) {
            return null;
        }
        //Что бы не переписывать через чур много пока будем использовать местами старую модельку
        $elementOld = NewProduct::findOne($element->id);

        $model = '';
        $nameForFeed = $elementOld->getNameForFeed();
        if (!$nameForFeed) {
            return null;
        }

        $nameForFeedWords = explode("«", $nameForFeed);
        foreach ($nameForFeedWords as $word) {
            if (strpos($word, "»")) {
                $model = str_replace('»', '', $word);
                break;
            }
        }
        if (!$model) {
            return null;
        }
        $typePrefix = str_replace("«" . $model . "»", '', $nameForFeed);
        if (!$typePrefix) {
            return null;
        }
        $brandName = $element->brand ? Html::encode($element->brand->name) : false;

        if (!$brandName) {
            return null;
        }

        $typeCodesSize = [
            'moda' => 'KFSS_ETALON___ODEJDA',
            'footwear' => 'KFSS_RAZMER_OBUVI'
        ];

        $code = $typeCodesSize[$mode];

        $props = $element->lot->getCharacteristics(false);

        $technicalDetail = $elementOld->relatedPropertiesModel->getAttribute('HARAKTERISTIKI');

        $uploadedSizeNames = [];//у некоторых размеров задублировались названия

        foreach ($modifications as $mod) {
            if ($mod->parent_content_element_id != $element->id) {
                continue;
            }
            $size = ProductParam::getParamModificationByCode($mod->id, [$code]);

            if ($size) {
                if (!in_array($size->name, $uploadedSizeNames)) {
                    $xoffer = $xoffers->appendChild(new \DOMElement('offer'));

                    $this->_addOfferAttributes($xoffer, $mod);
                    $this->_addNameParams($xoffer, $typePrefix, $brandName, $model);
                    $this->_addMainParams($xoffer, $element, $elementOld);

                    $this->_addDeliveryParams($xoffer);

                    if ($technicalDetail) {
                        $xoffer->appendChild(new \DOMElement('description', $technicalDetail));
                    }

                    $this->_addPriceParams($xoffer, $element);

                    $param = $xoffer->appendChild(new \DOMElement('param', $size->name));
                    $param->setAttribute('name', 'Размер');
                    $param->setAttribute('unit', 'RU');

                    $colorData = $element->getColorData();
                    if ($colorData) {
                        $param = $xoffer->appendChild(new \DOMElement('param', $colorData['name']));
                        $param->setAttribute('name', 'Цвет');
                    }
                    if (is_array($props) && count($props)) {
                        $this->_addPropParams($xoffer, $props);
                    }
                    $uploadedSizeNames[] = $size->name;
                }
            }
        }
        return $this;
    }


    private function getCharacteristics($techDetails)
    {
        $characteristics = null;
        if ($techDetails) {
            $techDetails = trim($techDetails);
            if (($props = json_decode((string)$techDetails, true)) && json_last_error() == JSON_ERROR_NONE) {
                $characteristics = $props;
            } else {
                //err - кривой жсон или не жсон вовсе. Бывает.
                $characteristics = str_replace(['<br />', "\n"], '', Html::decode($techDetails));
            }
        }
        return $characteristics;
    }

    private function _initOfferArrayModaFoot(\DOMNode $xoffers, array $element, $mode = 'moda')
    {
//        $product = Product::findOne($element['id']);

        $model = null;

        $nameForFeed = $element['lot_name'] ?? $element['name'];
        if (!$nameForFeed) {
            return null;
        }

        $nameForFeedWords = explode("«", $nameForFeed);
        foreach ($nameForFeedWords as $word) {
            if (strpos($word, "»")) {
                $model = str_replace('»', '', $word);
                break;
            }
        }
        if (!$model) {
            return null;
        }
        $typePrefix = str_replace("«" . $model . "»", '', $nameForFeed);
        if (!$typePrefix) {
            return null;
        }

        $brandName = static::$brands[$element['lot_new_brand_id']] ?? null;
        if (!$brandName) {
            return null;
        }

        //Разбиваем на модификации
        $modifications = Product::getProductOffersQuery($element['id'], true)
            ->createCommand()
            ->queryAll();

        if (!$modifications) {
            return null;
        }

        $typeCodesSize = [
            'moda' => 'KFSS_ETALON___ODEJDA',
            'footwear' => 'KFSS_RAZMER_OBUVI'
        ];

        $code = $typeCodesSize[$mode];

        $characteristics = null;

        $characteristics = $this->getCharacteristics($element['tech_details']);

        //todo не нашел в базе это
//        $technicalDetail = $elementOld->relatedPropertiesModel->getAttribute('HARAKTERISTIKI');

        $uploadedSizeNames = [];//у некоторых размеров задублировались названия

        if ($element['color_bx_id']) {
            $color = static::$colors[$element['color_bx_id']] ?? null;
        } elseif ($element['color_main_id']) {
            $color = static::$colors[$element['color_main_id']] ?? null;
        } else {
            $color = null;
        }

        foreach ($modifications as $mod) {
            if ($mod['parent_content_element_id'] != $element['id']) {
                continue;
            }

            $size = ProductParam::getParamModificationByCode($mod['id'], [$code]);

            if ($size && !in_array($size->name, $uploadedSizeNames)) {
                $xoffer = $xoffers->appendChild(new \DOMElement('offer'));

                $this->_addOfferAttributes($xoffer, $mod);
                $this->_addNameParams($xoffer, $typePrefix, $brandName, $model);
                $this->_addMainParams($xoffer, $element);
                $this->_addDeliveryParams($xoffer);
                $this->_addPriceParams($xoffer, $element);

                $param = $xoffer->appendChild(new \DOMElement('param', $size->name));
                $param->setAttribute('name', 'Размер');
                $param->setAttribute('unit', 'RU');

                if ($color) {
                    $param = $xoffer->appendChild(new \DOMElement('param', $color));
                    $param->setAttribute('name', 'Цвет');
                }
                if (is_array($characteristics) && count($characteristics)) {
                    $this->_addPropParams($xoffer, $characteristics);
                }

                $uploadedSizeNames[] = $size->name;
            }
        }

        return $this;
    }

    public function _initOfferArray(\DOMNode $xoffers, array $element)
    {
        $class = get_class($this);
        if ($class != 'modules\shopandshow\components\export\ExportShopYandexMarketNewHandler') {
            return $this->_initOfferArrayOriginal($xoffers, $element);
        }

        $tree = $this->treeModels[$element['lot_tree_id']] ?? null;

        if (!$tree) {
            return null;
        }

        //Дополнительная проверка не показывать товар из отключенной категории
        if ($tree->active != Common::BOOL_Y || !in_array($tree->id, $this->unloadedTreeIds)) {
            return null;
        }

        if (Category::checkIsModa($tree)) {
            return $this->_initOfferArrayModaFoot($xoffers, $element);
        }
        if (Category::checkIsFootwear($tree)) {
            return $this->_initOfferArrayModaFoot($xoffers, $element, 'footwear');
        }

        if (Category::checkIsElectrical($tree)) {
            return $this->_initOfferArrayOther($xoffers, $element, 'electrical');
        }

        return $this->_initOfferArrayOther($xoffers, $element);

    }

    public function _initOfferArrayOld(\DOMNode $xoffers, Product $element)
    {
        $class = get_class($this);
        if ($class != 'modules\shopandshow\components\export\ExportShopYandexMarketNewHandler') {
            return $this->_initOfferArrayOriginal($xoffers, $element);
        }

        if (!$element->lot) {
            return null;
        }

        //Дополнительная проверка не показывать товар из отключенной категории
        if ($element->lot->tree->active != Common::BOOL_Y || !in_array($element->lot->tree->id, $this->unloadedTreeIds)) {
            return null;
        }

        if (Category::checkIsModa($element->lot->tree)) {
            return $this->_initOfferArrayModaFoot($xoffers, $element);
        }
        if (Category::checkIsFootwear($element->lot->tree)) {
            return $this->_initOfferArrayModaFoot($xoffers, $element, 'footwear');
        }
        if (Category::checkIsElectrical($element->lot->tree)) {
            return $this->_initOfferArrayOther($xoffers, $element, 'electrical');
        }

        return $this->_initOfferArrayOther($xoffers, $element);
//        return $this->_initOfferArrayOriginal($xoffers, $element);
    }

    public function _initOfferArrayOriginal(\DOMNode $xoffers, array $element)
    {
        $availability = false;
        $checkQuantityForAvailability = false;

        $urlProduct = Url::getUrlCardForFeed($element, $element['lot_new_lot_num']);
        $picture = Url::getUrlImageForFeed($element);

        if (self::$enableFloktoryResize) {
            $class = get_class($this);
            if ($class == 'modules\shopandshow\components\export\FlocktoryHandler') {
                $data = [
                    'image' => $picture,
                    'type' => 'floctory',
//                    'w' => 720,
//                    'h' => 360,
                    'mode' => 1
                ];
                $picture = 'https://shopandshow.ru/images/?' . http_build_query($data, '', '&');
            }
        }

        $analyticsProduct = $this->analyticsProductsForFeed[$element['parent_content_element_id']] ?? null;
        if ($analyticsProduct['actual']) {
            $checkQuantityForAvailability = true;

            //* ДопПроверка для фида с выгодой на час *//

            //Если товар из выгоды - проверяем реальный остаток, иначе - типа нет такого товара
            if (
                \common\helpers\Common::getObjectClassShortName($this) == 'ExportShopYandexMarketFlashPriceHandler'
                && !isset($this->flashPriceProducts[$element['parent_content_element_id']])
            ) {
                $checkQuantityForAvailability = false;
            }

            //* /ДопПроверка для фида с выгодой на час *//
        }

        if ($checkQuantityForAvailability) {
            $availability = $element['new_quantity'] > 0;
        }

        $xoffer = $xoffers->appendChild(new \DOMElement('offer'));

        $xoffer->appendChild(new \DOMAttr('id', $element['id']));

        $xoffer->appendChild(new \DOMAttr('available', $availability ? 'true' : 'false'));

        $xoffer->appendChild(new \DOMElement('url', htmlspecialchars($urlProduct)));

        $xoffer->appendChild(new \DOMElement('name', htmlspecialchars($element['lot_name'] ?? $element['name'])));

        $xoffer->appendChild(new \DOMElement('picture', htmlspecialchars($picture)));

        $xoffer->appendChild(new \DOMElement('categoryId', $element['lot_tree_id'] ?? $element['tree_id']));

        $this->_addPriceParams($xoffer, $element);

        $xoffer->appendChild(new \DOMElement('currencyId', 'RUB'));

        //todo не нашел нигде в базе данных эту характеристику
        if (false) {
            $technicalDetail = $elementOld->relatedPropertiesModel->getAttribute('HARAKTERISTIKI');
            if ($technicalDetail) {
                $technicalDetail = Feed::remove($technicalDetail);
                try {
                    $technicalDetail = "<![CDATA[" . $technicalDetail . "]]>";
                    // todo  disable because not valid yandex
                    $xoffer->appendChild(new \DOMElement('description', $technicalDetail));
                } catch (Exception $e) {
                }
            }
        }


        $this->_addDeliveryParams($xoffer);

        if ($this->default_sales_notes) {
            $xoffer->appendChild(new \DOMElement('sales_notes', $this->default_sales_notes));
        }

        return $this;

    }

    public function _initOfferArrayOriginalOld(\DOMNode $xoffers, Product $element)
    {
        //Что бы не переписывать через чур много пока будем использовать местами старую модельку
        $elementOld = NewProduct::findOne($element->id);

        //* Stock status *//

        $availability = false;
        $checkQuantityForAvailability = false;

//        if ($element->isCard() && isset($this->analyticsProductsForFeed[$element->parent_content_element_id])) {
        if (true) { //именно такая проверка уже проходила выше в _appendOffersArray()
            $analyticsProduct = $this->analyticsProductsForFeed[$element->parent_content_element_id] ?? null;
            if ($analyticsProduct && $analyticsProduct['actual']) {
                $checkQuantityForAvailability = true;

                //* ДопПроверка для фида с выгодой на час *//

                //Если товар из выгоды - проверяем реальный остаток, иначе - типа нет такого товара
                if (
                    \common\helpers\Common::getObjectClassShortName($this) == 'ExportShopYandexMarketFlashPriceHandler'
                    && !isset($this->flashPriceProducts[$element->parent_content_element_id])
                ) {
                    $checkQuantityForAvailability = false;
                }

                //* /ДопПроверка для фида с выгодой на час *//
            }
        }

        if ($checkQuantityForAvailability) {
            $availability = $element->new_quantity > 0;
        }

        $picture = $elementOld->getStorageFile();

        if (self::$enableFloktoryResize) {
            $class = get_class($this);
            if ($class == 'modules\shopandshow\components\export\FlocktoryHandler') {

                $data = [
                    'image' => $picture,
                    'type' => 'floctory',
//                    'w' => 720,
//                    'h' => 360,
                    'mode' => 1
                ];

                $picture = 'https://shopandshow.ru/images/?' . http_build_query($data, '', '&');

            }
        }


        //* /Stock status *//

        $xoffer = $xoffers->appendChild(new \DOMElement('offer'));
        $xoffer->appendChild(new \DOMAttr('id', $element->id));

        $xoffer->appendChild(new \DOMAttr('available', $availability ? 'true' : 'false'));

        $xoffer->appendChild(new \DOMElement('url', htmlspecialchars(Url::createUrlForFeed($elementOld, $this))));

        $xoffer->appendChild(new \DOMElement('name', htmlspecialchars($elementOld->getNameForFeed())));

        $xoffer->appendChild(new \DOMElement('picture', htmlspecialchars($picture)));

        $xoffer->appendChild(new \DOMElement('categoryId', $elementOld->getCategoryId()));

        $this->_addPriceParams($xoffer, $element);


        $xoffer->appendChild(new \DOMElement('currencyId', 'RUB'));


        $technicalDetail = $elementOld->relatedPropertiesModel->getAttribute('HARAKTERISTIKI');
        if ($technicalDetail) {
            $technicalDetail = Feed::remove($technicalDetail);
            try {
                $technicalDetail = "<![CDATA[" . $technicalDetail . "]]>";
                // todo  disable because not valid yandex
                $xoffer->appendChild(new \DOMElement('description', $technicalDetail));
            } catch (Exception $e) {
            }
        }

        $this->_addDeliveryParams($xoffer);

        if ($this->default_sales_notes) {
            $xoffer->appendChild(new \DOMElement('sales_notes', $this->default_sales_notes));
        }

        return $this;
    }


}