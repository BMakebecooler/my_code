<?php

namespace modules\shopandshow\components\export;

use common\helpers\ArrayHelper;
use common\interfaces\ExportType;
use common\models\cmsContent\CmsContent;
use common\models\cmsContent\CmsContentElement;
use common\models\Tree;
use Exception;
use skeeks\cms\components\Cms;
use skeeks\cms\exportSitemap\ExportSitemapHandler as SxExportSitemapHandler;
use yii\data\Pagination;
use yii\helpers\FileHelper;

class ExportSitemapHandler extends SxExportSitemapHandler implements ExportType
{

    public $site_code;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }


    public function export()
    {
        //TODO: if console app
        \Yii::$app->urlManager->baseUrl = $this->base_url;
        \Yii::$app->urlManager->scriptUrl = $this->base_url;

        ini_set("memory_limit", "8192M");
        set_time_limit(0);

        //Создание дирректории
        if ($dirName = dirname($this->rootFilePath)) {
            $this->result->stdout("Корневая директория: {$dirName}\n");

            if (!is_dir($dirName) && !FileHelper::createDirectory($dirName)) {
                throw new Exception("Не удалось создать директорию для файла");
            }
        }

        $query = Tree::find()
            ->where(['active' => Cms::BOOL_Y])
            ->orWhere(['level' => 0])
            ->orderBy(['level' => SORT_ASC, 'priority' => SORT_ASC]);

        if ($this->site_code) {
            $query->andWhere(['site_code' => $this->site_code]);
        }

        $trees = $query->all();

        $result = [];

        $this->result->stdout("\tСоздание файла sitemap для разделов\n");

        $sitemap = [];
        if ($trees) {
            /**
             * @var Tree $tree
             */
            foreach ($trees as $tree) {
                if (!$tree->redirect && !$tree->redirect_tree_id) {

                    $result[] =
                        [
                            "loc" => $tree->absoluteUrl,
                            "lastmod" => $this->_lastMod($tree),
                            "priority"      => $this->_calculatePriority($tree),
                            "changefreq"    => $this->_calculateChangefreq($tree)
                        ];
                }
            }

            $publicUrl = $this->generateSitemapFile('tree.xml', $result);
            $this->result->stdout("\tФайл успешно сгенерирован: {$publicUrl}\n");

            $sitemap[] = $publicUrl;
        }

        if ($this->content_ids) {
            $this->result->stdout("\tЭкспорт контента\n");

            foreach ($this->content_ids as $contentId) {
                $content = CmsContent::findOne($contentId);
                $files = $this->exportContent($content);

                $sitemap = ArrayHelper::merge($sitemap, $files);
            }
        }


        if ($sitemap) {
            $this->result->stdout("\tГенерация sitemap\n");

            $data = [];
            foreach ($sitemap as $file) {
                $data[] =
                    [
                        "loc" => $file,
                        "lastmod" => $this->_lastMod(new Tree(['updated_at' => time()])),
                    ];
            }

            $sitemapContent = \Yii::$app->view->render('@frontend/views/sitemap/sitemapindex', [
                'data' => $data
            ]);

            $fp = fopen($this->rootFilePath, 'w');
            // записываем в файл текст
            fwrite($fp, $sitemapContent);
            // закрываем
            fclose($fp);

            if (!file_exists($this->rootFilePath)) {
                throw new Exception("\t\tНе удалось создать файл");
            }
        }

        echo  $this->result;

        return $this->result;
    }

    /**
     * @param CmsContent $cmsContent
     * @return array
     * @throws Exception
     */
    public  function exportContent(CmsContent $cmsContent)
    {
        $files = [];
        $this->result->stdout("\t\t {$cmsContent->name}\n");

        $query = CmsContentElement::find()
            ->where(['content_id' => $cmsContent->id])
            ->orderBy(['published_at' => SORT_DESC]);

        $countQuery = clone $query;
        $total = $countQuery->count();

        $pages = new Pagination([
            'totalCount'        => $total,
            'defaultPageSize'   => $this->max_urlsets,
            'pageSizeLimit'   => [1, $this->max_urlsets],
        ]);

        $this->result->stdout("\t\t\t Elements = {$total}\n");
        $this->result->stdout("\t\t\t Max Urlsets = {$this->max_urlsets}\n");
        $this->result->stdout("\t\t\t PageCount = {$pages->pageCount}\n");

        for ($i = 0; $i < $pages->pageCount; $i ++)
        {
            $pages->setPage($i);

            $this->result->stdout("\t\t\t\t Page = {$i}\n");
            $this->result->stdout("\t\t\t\t Offset = {$pages->offset}\n");
            $this->result->stdout("\t\t\t\t limit = {$pages->limit}\n");

            $result = [];
            foreach ($query->offset($pages->offset)->limit($pages->limit)->each(200) as $element)
            {
                $result[] =
                    [
                        "loc" => $element->absoluteUrl,
                        "lastmod" => $this->_lastMod($element),
                        "priority"      => "0.7",
                        "changefreq"    => "weekly",
                    ];
            }

            $publicUrl = $this->generateSitemapFile("content_{$cmsContent->id}_page{$i}.xml", $result);
            $this->result->stdout("\tФайл успешно сгенерирован: {$publicUrl}\n");
            $files[] = $publicUrl;
        }

        return $files;
    }


    /**
     * @param $sitemapFileName
     * @param $data
     * @return bool|string
     * @throws Exception
     */
    public  function generateSitemapFile($sitemapFileName, $data)
    {
        $rootFilePath               = $this->rootSitemapsDir . "/" . $sitemapFileName;
        $rootFilePath               = FileHelper::normalizePath($rootFilePath);

        //Создание дирректории
        if ($dirName = dirname($rootFilePath))
        {
            $this->result->stdout("\t\tПапка: {$dirName}\n");

            if (!is_dir($dirName) && !FileHelper::createDirectory($dirName))
            {
                throw new Exception("Не удалось создать директорию для файла");
            }
        }

        $this->result->stdout("\t\tГенерация файла: {$rootFilePath}\n");

        $treeSitemapContent = \Yii::$app->view->render('@frontend/views/sitemap/urlsets', [
            'data' => $data
        ]);

        $fp = fopen($rootFilePath, 'w');
        // записываем в файл текст
        fwrite($fp, $treeSitemapContent);
        // закрываем
        fclose($fp);

        if (!file_exists($rootFilePath))
        {
            throw new Exception("\t\tНе удалось создать файл");
        }

        return $this->base_url . FileHelper::normalizePath($this->sitemaps_dir . "/" . $sitemapFileName);
    }


    /**
     * @param Tree $model
     * @return string
     */
    private function _lastMod($model)
    {
        //$string = "2013-08-03T21:14:41+01:00";
        //$string = date("Y-m-d", $model->updated_at) . "T" . date("H:i:s+04:00", $model->updated_at);
        $string = date("c", $model->updated_at);

        return $string;
    }

    /**
     * @param Tree $model
     * @return string
     */
    private function _calculatePriority($model)
    {
        $priority = '0.5';
        if ($model->level == 0) { // Для главной страницы
            $priority = '1.0';
        } else if ($model->tree_type_id == CATALOG_TREE_TYPE_ID) { // Для каталога
            $priority = '0.9';
        }

        return $priority;
    }

    /**
     * @param Tree $model
     * @return string
     */
    private function _calculateChangefreq($model)
    {
        $freq = 'monthly';
        if ($model->level == 0) { // Для главной страницы
            $freq = 'daily';
        }
        elseif ($model->tree_type_id == CATALOG_TREE_TYPE_ID) { // Для каталога
            $freq = 'daily';
        }

        return $freq;
    }

    public function getNameType()
    {
        return 'sitemap';
        // TODO: Implement getNameType() method.
    }
}