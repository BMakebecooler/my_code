<?php/** * php ./yii imports/shop-and-show/sections * php ./yii imports/shop-and-show/properties-products * php ./yii imports/shop-and-show/properties-sale-products * php ./yii imports/shop-and-show/remove-products * php ./yii imports/shop-and-show/products * php ./yii imports/shop-and-show/sale-products * php ./yii imports/shop-and-show/product-photos * php ./yii imports/shop-and-show/modification-color * php ./yii imports/shop-and-show/add-additional-properties * php ./yii imports/shop-and-show/add-new-cms-content * php ./yii imports/shop-and-show/add-footer-content-pages */namespace console\controllers\imports;use common\models\cmsContent\CmsContent;use common\models\cmsContent\CmsContentProperty;use skeeks\cms\models\CmsContentPropertyEnum;use console\models\imports\ImportCategories;use console\models\imports\ImportItemsPropertiesValues;use console\models\imports\ImportItemsPropertyValues;use console\models\imports\ImportModification;use console\models\imports\ImportPhoto;use console\models\imports\ImportProduct;use console\models\imports\ImportProductProperties;use console\models\imports\ImportProductSaleProperties;use console\models\imports\ImportSaleProduct;use console\models\imports\ImportSearchColor;use console\models\imports\ImportSaleItemsPropertyLists;use console\models\imports\ImportActivePrice;use console\models\sas\ActivePriceModel;use console\models\sas\CategoryModel;use console\models\sas\ModificationModel;use console\models\sas\PhotoModel;use console\models\sas\ProductModel;use console\models\sas\ProductPropertyModel;use console\models\sas\ProductSaleModel;use console\models\sas\SearchColorModel;use console\models\sas\SaleItemProperyListModel;use skeeks\cms\components\Cms;use skeeks\cms\Exception;use skeeks\cms\mail\helpers\Html;use skeeks\cms\models\CmsContentElement;use skeeks\cms\models\CmsContentElementProperty;use skeeks\cms\models\CmsStorageFile;use skeeks\cms\models\CmsTree;use skeeks\cms\relatedProperties\models\RelatedPropertyModel;use skeeks\cms\shop\models\ShopCmsContentElement;use skeeks\cms\shop\models\ShopTypePrice;use Yii;use yii\helpers\Console;use yii\helpers\FileHelper;use modules\shopandshow\models\shop\ShopContentElement;/** * Class ImportShopAndShow * * @package console\controllers */class ShopAndShowController extends \yii\console\Controller{    protected  $errorRows = [];    /**     * @var ImportProduct     */    protected $importProduct = null;    /**     * @var ImportCategories     */    protected $importCategories = null;    /**     * @var ImportProductProperties     */    protected $importProductProperties = null;    /**     * @var ImportPhoto     */    protected $importPhotos = null;    /**     * @var ImportModification     */    protected $importModification = null;    /**     * @var ImportSaleItemsPropertyLists     */    protected $importSaleItemsPropertyLists = null;    protected $importPriceType = null;    protected $importItemsPropertiesValues = null;    protected $initPriceTypes = [        'BASE' => 'Основная цена',        'SHOPANDSHOW' => 'Цена Shop&show',        'SALE' => 'Цена "распродажи"',        'TODAY' => 'Цена "только сегодня"',        'DISCOUNTED' => 'Цена премьеры',    ];    public function beforeAction($action)    {        ini_set('memory_limit', '-1');        if (parent::beforeAction($action)) {        }        return true;    }    protected function showErrors($action)    {        if ( count($this->errorRows) > 0 ) {            $this->stdout("Ошибки при выполнении ". $action ."\n", Console::FG_RED);            print_r($this->errorRows);            $this->errorRows = [];        }    }    public function actionAll()    {        $start = time();//        CmsContentProperty::deleteAll();        /** Заводим все необходимые свойства, справочники и эелементы ~ 30 минут */        $this->actionProperties();//        $this->actionRemoveProducts();//        $this->actionSections(); //Импорт категорий        $this->actionProducts();        $this->actionSaleProducts();        $this->actionLoadItemProperties();        $this->actionProductPhotos();        $this->stdout("\n\n Realy elapsed: " . ( (time() - $start / 60) )."\n\n", Console::FG_GREEN);    }    public function actionProperties()    {        return;        // ОТКЛЮЧЕНО ВСЕ НА ВСЯКИЙ СЛУЧАЙ ИБО НЕ ВЕЗДЕ ЕСТЬ ПРОВЕРКИ НА НАЛИЧИЕ ЭЛЕМЕНТА        /** Заводим типы цен */        $this->actionInitPriceTypes();        /** Создаем необходимые свойства и значения */        $this->actionAddAdditionalProperties();        $this->actionAddNewCmsContent();        $this->actionImportSearchColors();        $this->actionImportActivePriceTypes();        $this->actionModificationColor();        /** Звводим справочники значений (Цвет, Размер обуви и т.п. кроме Цвет модификации COLOR_REF) */        $this->actionImportSaleItemsPropertyLists();        /** Привязка свойств к товарам и товарным предложениям */        $this->actionPropertiesProducts();//Импорт свойств товаров        $this->actionPropertiesSaleProducts();//Импорт свойств товарных предложений    }    /**     * Импорт категорий из файла     */    public function actionSections()    {        $this->importFileCategory();//        $this->importDownloadFileCategory();//        $this->importCategories->rootTree->delete();//        die();        $counter = 0;        $handle = fopen($this->importCategories->rootPath, "r");        if (!$this->importCategories->rootTree) {            $this->stdout("\tNot found catalog tree\n", Console::FG_RED);            return false;        }        $count = $this->importCategories->countRows();        Console::startProgress(0, $count);        while (($data = fgetcsv($handle, 0, ",")) !== false) {            $counter++;            if ($counter <= 1) {                continue;            }            Console::updateProgress($counter, $count);            $row = CategoryModel::createFromCsvRow($data);            $tree = $row->getPidCmsTree($row->column0);            if (!$tree) {                $newTree = new CmsTree();                $newTree->name = $row->column2;                $newTree->code = $row->column3;                $newTree->active = ((int)$row->column4) ? Cms::BOOL_Y : Cms::BOOL_N;                $newTree->description_short = $row->column5;                $newTree->description_full = $row->column6;                $newTree->meta_title = isset($row->column8) ? $row->column8 : '';                $newTree->meta_description = isset($row->column9) ? $row->column9 : '';                if ($row->isParent()) {                    $result = $this->importCategories->rootTree->processAddNode($newTree);                } else {                    $treeP = $row->getPidCmsTree($row->column1);                    $result = $treeP->processAddNode($newTree);                }                if ($result) {                    $newTree->relatedPropertiesModel->setAttribute('vendorid', (string)$row->column0);                    if (!$newTree->relatedPropertiesModel->save()) {                        var_dump($newTree->relatedPropertiesModel->getErrors());                        die();                    }                } else {                    $this->stdout("\tNot added tree {$newTree->name}\n", Console::FG_RED);                }            }        }        Console::endProgress();    }    protected function importFileCategory()    {        $this->importCategories = new ImportCategories();        $this->stdout("File importing: {$this->importCategories->rootPath}\n", Console::BOLD);        if ($this->importCategories->countRows() > 0) {            $this->stdout("\tFound csv rows: {$this->importCategories->countRows()}\n", Console::FG_GREEN);        } else {            $this->stdout("\tNot found csv rows\n", Console::FG_RED);        }    }    /**     * Скачиваем файл указанный в настройках     * @return bool     */    protected function importDownloadFileCategory()    {        $downloadingFile = \Yii::$app->settings->categoriesCSVUrl;        $this->stdout("\tDownloading file: {$downloadingFile}\n", Console::FG_YELLOW);        $content = file_get_contents(\Yii::$app->settings->categoriesCSVUrl);        $tmpDir = \Yii::getAlias('@runtime/tmp/imports/' . date("Y-m-d H:i:s"));        if (!$content) {            $this->stdout("\tNot found download conntent\n", Console::FG_RED);            return false;        }        if (!FileHelper::createDirectory($tmpDir)) {            $this->stdout("\tNot created tmp dir\n", Console::FG_RED);            return false;        }        $file = $tmpDir . "/import-" . time() . ".csv";        // открываем файл, если файл не существует,        //делается попытка создать его        $fp = fopen($file, "w");        // записываем в файл текст        fwrite($fp, $content);        // закрываем        fclose($fp);        $this->importCategories = new ImportCategories([            'rootPath' => $file        ]);        $this->stdout("File importing: {$this->importCategories->rootPath}\n", Console::BOLD);        if ($this->importCategories->countRows() > 0) {            $this->stdout("\tFound csv rows: {$this->importCategories->countRows()}\n", Console::FG_GREEN);        } else {            $this->stdout("\tNot found csv rows\n", Console::FG_RED);        }        return true;    }    protected function importFileProductProperties()    {        $this->importProductProperties = new ImportProductProperties();        $this->stdout("File importing: {$this->importProductProperties->rootPath}\n", Console::BOLD);        if ($this->importProductProperties->countRows() > 0) {            $this->stdout("\tFound csv rows: {$this->importProductProperties->countRows()}\n", Console::FG_GREEN);        } else {            $this->stdout("\tNot found csv rows\n", Console::FG_RED);        }    }    public function actionPropertiesProducts()    {        $this->importFileProductProperties();        $counter = 0;        $handle = fopen($this->importProductProperties->rootPath, "r");        $count = $this->importProductProperties->countRows();        Console::startProgress(0, $count, 'Processed: ', false);        while (($data = fgetcsv($handle, 0, ",")) !== false) {            $counter++;            if ($counter <= 1) {                continue;            }            Console::updateProgress($counter, $count);            $row = ProductPropertyModel::createFromCsvRow($data);            if (in_array(str_replace('PRICE_', '', $row->column3), array_keys($this->initPriceTypes))) {//                $this->stdout("\tСвойство {$row->column1} исключено. Перенесено в типы цен!\n", Console::FG_YELLOW);                continue;            }            if ($row->saveProperty()) {//                $this->stdout("\tСвойство {$row->column1} - {$row->column3} успешно добавлено!\n", Console::FG_GREEN);            } else {                $this->errorRows[] = [ 'data' => $data, 'errors' => $row->getErrors() ];//                $this->stdout("\tПри добавлении нового свойства {$row->column1} возникла ошибка\n", Console::FG_RED);            }        }        Console::endProgress();        $this->showErrors('Product properties');    }    protected function importFileProductSaleProperties()    {        $this->importProductProperties = new ImportProductSaleProperties();        $this->stdout("File importing: {$this->importProductProperties->rootPath}\n", Console::BOLD);        if ($this->importProductProperties->countRows() > 0) {            $this->stdout("\tFound csv rows: {$this->importProductProperties->countRows()}\n", Console::FG_GREEN);        } else {            $this->stdout("\tNot found csv rows\n", Console::FG_RED);        }    }    public function actionPropertiesSaleProducts()    {        $this->importFileProductSaleProperties();        $counter = 0;        $handle = fopen($this->importProductProperties->rootPath, "r");        $count = $this->importProductProperties->countRows();        Console::startProgress(0, $count, 'Processed: ', false);        while (($data = fgetcsv($handle, 0, ",")) !== false) {            $counter++;            if ($counter <= 1) {                continue;            }            Console::updateProgress($counter, $count);            $row = ProductPropertyModel::createFromCsvRow($data);            if (in_array(str_replace('PRICE_', '', $row->column3), array_keys($this->initPriceTypes))) {//                $this->stdout("\tСвойство {$row->column1} исключено. Перенесено в типы цен!\n", Console::FG_YELLOW);                continue;            }            if ($row->saveProperty(ProductPropertyModel::TREE_TYPE_PRODUCT_SALE_PROPERTIES_ID)) {//                $this->stdout("\tСвойство {$row->column1} успешно добавлено!\n", Console::FG_GREEN);            } else {                $this->errorRows[] = [ 'data' => $data, 'errors' => $row->getErrors() ];//                $this->stdout("\tПри добавлении нового свойства {$row->column1} возникла ошибка\n", Console::FG_RED);            }        }        Console::endProgress();        $this->showErrors('Sale items properties');    }    protected function importFileProducts()    {        $this->importProduct = new ImportProduct();        $this->stdout("File importing: {$this->importProduct->rootPath}\n", Console::BOLD);        if ($this->importProduct->countRows() > 0) {            $this->stdout("\tFound csv rows: {$this->importProduct->countRows()}\n", Console::FG_GREEN);        } else {            $this->stdout("\tNot found csv rows\n", Console::FG_RED);        }    }    public function actionProducts()    {        $this->importFileProducts();        $counter = 0;        $handle = fopen($this->importProduct->rootPath, "r");        $count = $this->importProduct->countRows();        Console::startProgress(0, $count, 'Processed: ', false);        $parameters = [];        while (($data = fgetcsv($handle)) !== false) {            $counter++;            if ($counter <= 1707) {                continue;            }            if (count($data) < 5) {                $this->stdout("\tТовар пропущен! ".json_encode($data)."\n", Console::FG_CYAN);            }            $row = ProductModel::createFromCsvRow($data);            if ($counter === 1) {                $parameters = $row;                continue;            }            Console::updateProgress($counter, $count);            $row->setParams($parameters);            $this->stdout($row->column3);            if ($row->addProduct()) {//                $this->stdout("\tТовар {$row->column0} успешно добавлен!\n", Console::FG_GREEN);            } else {                $this->errorRows[] = [ 'data' => $data, 'errors' => $row->getErrors() ];//                $this->stdout("\tТовар {$row->column0} не добавлен! \n", Console::FG_RED);            }//            \Yii::$app->end();//            fclose($handle);////            Console::endProgress();////            return;        }        fclose($handle);        Console::endProgress();        $this->showErrors('Products');    }    protected function importFileSaleProducts()    {        $this->importProduct = new ImportSaleProduct();        $this->stdout("File importing: {$this->importProduct->rootPath}\n", Console::BOLD);        if ($this->importProduct->countRows() > 0) {            $this->stdout("\tFound csv rows: {$this->importProduct->countRows()}\n", Console::FG_GREEN);        } else {            $this->stdout("\tNot found csv rows\n", Console::FG_RED);        }    }    public function actionSaleProducts()    {        $this->importFileSaleProducts();        $counter = 0;        $handle = fopen($this->importProduct->rootPath, "r");        $count = $this->importProduct->countRows();        Console::startProgress(0, $count, 'Processed: ', false);        $parameters = [];//        $offset = 326;        while (($data = fgetcsv($handle, 0, ",")) !== false) {            $counter++;////            if ($counter <= $offset) {//                continue;//            }            if (count($data) < 5) {                $this->stdout("\t Товарное предложение пропущено! ".json_encode($data)."\n", Console::FG_RED);                continue;            }            $row = ProductSaleModel::createFromCsvRow($data);            if ($counter === 1) {                $parameters = $row;                continue;            }            Console::updateProgress($counter, $count);            $row->setParams($parameters);//            $this->stdout($row->column3);            if ($row->addProduct()) {//                $this->stdout("\tТовар {$row->column0} успешно добавлен!\n", Console::FG_GREEN);            } else {                $this->errorRows[] = [ 'data' => $data, 'errors' => $row->getErrors() ];                //$this->stdout("\tПри добавлении нового товара {$row->column0} возникла ошибка\n", Console::FG_RED);            }        }        fclose($handle);        Console::endProgress();        $this->showErrors('Sale items');    }    /**     * Инициализация типов цен     */    public function actionInitPriceTypes()    {        /** Загрузка типов цен */        foreach ($this->initPriceTypes as $code => $name) {            $price = ShopTypePrice::findOne(['code' => $code]);            if ($price === NULL) {                $price = new ShopTypePrice();                $price->code = $code;                $price->name = $name;                $price->def = Cms::BOOL_Y;                if (!$price->save())                    throw new \skeeks\cms\Exception(                        'Не могу создать цены:' . json_encode($price->getErrors())                    );            }        }    }    /**     * RemoveProducts     */    public function actionRemoveProducts()    {        try {            $find = \skeeks\cms\models\CmsContentElement::find()                ->joinWith('relatedElementProperties map')                ->joinWith('relatedElementProperties.property property')                ->joinWith('cmsContent as ccontent')                ->andWhere(['ccontent.code' => 'product'])                ->groupBy(['cms_content_element.id'])//->limit(1000)            ;            $counter = 0;            $count = $find->count();            $this->stdout("Всего товаров: " . $count . "\n");            Console::startProgress(0, $count);            foreach ($find->all() as $cmsContentElement) {                $counter++;                /**                 * @var $cmsContentElement CmsContentElement                 */                if ($cmsContentElement->delete()) {                    Console::updateProgress($counter, $count);                    $this->stdout("\tТовар удален: " . $cmsContentElement->id . "\n", Console::FG_GREEN);                } else {                    //throw new Exception("Not deleted: " . $cmsContentElement->id);                    $this->stdout("\tNot deleted:: " . $cmsContentElement->id . "\n", Console::FG_RED);                }            }            Console::endProgress();        } catch (\Exception $e) {            $this->stdout($e->getMessage(), Console::FG_RED);        }    }    protected function importFilePhotos()    {        $this->importPhotos = new ImportPhoto();        $this->stdout("File importing: {$this->importPhotos->rootPath}\n", Console::BOLD);        if ($this->importPhotos->countRows() > 0) {            $this->stdout("\tFound csv rows: {$this->importPhotos->countRows()}\n", Console::FG_GREEN);        } else {            $this->stdout("\tNot found csv rows\n", Console::FG_RED);        }    }    public function actionProductPhotos()    {        $this->importFilePhotos();        $counter = 0;        $handle = fopen($this->importPhotos->rootPath, "r");        $count = $this->importPhotos->countRows();        Console::startProgress(0, $count, 'Processed: ', false);        while (($data = fgetcsv($handle)) !== false) {            $counter++;            $row = PhotoModel::createFromCsvRow($data);            if ($counter === 1) {                continue;            }            Console::updateProgress($counter, $count);//            $this->stdout($row->column0);            if ($row->addPhoto()) {//                $this->stdout("\tФотка к товару {$row->column0} успешно добавлена!\n", Console::FG_GREEN);            } else {                $this->errorRows[] = [ 'data' => $data, 'errors' => $row->getErrors() ];//                $this->stdout("\tФотка к товару {$row->column0} не добавлена! \n" . json_encode($row->getErrors()), Console::FG_RED);//                \Yii::$app->end();            }        }        fclose($handle);        Console::endProgress();    }    protected function importModificationColor()    {        $this->importModification = new ImportModification();        $this->stdout("File importing: {$this->importModification->rootPath}\n", Console::BOLD);        if ($this->importModification->countRows() > 0) {            $this->stdout("\tFound csv rows: {$this->importModification->countRows()}\n", Console::FG_GREEN);        } else {            $this->stdout("\tNot found csv rows\n", Console::FG_RED);        }    }    public function actionModificationColor()    {        $this->importModificationColor();        $counter = 0;        $handle = fopen($this->importModification->rootPath, "r");        $count = $this->importModification->countRows();        Console::startProgress(0, $count, 'Processed: ', false);        while (($data = fgetcsv($handle)) !== false) {            $counter++;            $row = ModificationModel::createFromCsvRow($data);            if ($counter === 1) {                continue;            }            Console::updateProgress($counter, $count);            if ($row->addColor()) {//                $this->stdout("\tЗначение  {$row->column4} успешно добавлено в справочник!\n", Console::FG_GREEN);            } else {                $this->errorRows[] = [ 'data' => $data, 'errors' => $row->getErrors() ];//                $this->stdout("\tЗначение {$row->column4} не добавлено!\n", Console::FG_RED);            }        }        fclose($handle);        Console::endProgress();        $this->showErrors('Modification colors');    }    protected function importSearchColors()    {        $this->importModification = new ImportSearchColor();        $this->stdout("File importing: {$this->importModification->rootPath}\n", Console::BOLD);        if ($this->importModification->countRows() > 0) {            $this->stdout("\tFound csv rows: {$this->importModification->countRows()}\n", Console::FG_GREEN);        } else {            $this->stdout("\tNot found csv rows\n", Console::FG_RED);        }    }    public function actionImportSearchColors()    {        $this->importSearchColors();        $counter = 0;        $handle = fopen($this->importModification->rootPath, "r");        $count = $this->importModification->countRows();        Console::startProgress(0, $count, 'Processed: ', false);        while (($data = fgetcsv($handle)) !== false) {            $counter++;            if ($counter === 1) {                continue;            }            $row = SearchColorModel::createFromCsvRow($data);            if ($row->addColor()) {//                $this->stdout("\tЗначение  {$row->column1} успешно добавлено в справочник!\n", Console::FG_GREEN);            } else {                $this->errorRows[] = $row->attributes;//                $this->stdout("\tЗначение {$row->column1} не добавлено!\n", Console::FG_RED);            }            Console::updateProgress($counter, $count);        }        fclose($handle);        Console::endProgress();        $this->showErrors('Search colors');    }    protected function importActivePriceTypes()    {        $this->importPriceType = new ImportActivePrice();        $this->stdout("File importing: {$this->importPriceType->rootPath}\n", Console::BOLD);        if ($this->importPriceType->countRows() > 0) {            $this->stdout("\tFound csv rows: {$this->importPriceType->countRows()}\n", Console::FG_GREEN);        } else {            $this->stdout("\tNot found csv rows\n", Console::FG_RED);        }    }    public function actionImportActivePriceTypes()    {        $this->importActivePriceTypes();        $counter = 0;        $handle = fopen($this->importPriceType->rootPath, "r");        $count = $this->importPriceType->countRows();        Console::startProgress(0, $count, 'Processed: ', false);        while (($data = fgetcsv($handle)) !== false) {            $counter++;            if ($counter === 1) {                continue;            }            $row = ActivePriceModel::createFromCsvRow($data);            Console::updateProgress($counter, $count);            if ($row->addPrice()) {//                $this->stdout("\tЗначение  {$row->column1} успешно добавлено в справочник!\n", Console::FG_GREEN);            } else {                $this->errorRows[] = $data;//                $this->stdout("\tЗначение {$row->column1} не добавлено!\n", Console::FG_RED);            }        }        fclose($handle);        Console::endProgress();        $this->showErrors('Active price types');    }    protected function importSaleItemsPropertyLists()    {        $this->importSaleItemsPropertyLists = new ImportSaleItemsPropertyLists();        $this->stdout("File importing: {$this->importSaleItemsPropertyLists->rootPath}\n", Console::BOLD);        if ($this->importSaleItemsPropertyLists->countRows() > 0) {            $this->stdout("\tFound csv rows: {$this->importSaleItemsPropertyLists->countRows()}\n", Console::FG_GREEN);        } else {            $this->stdout("\tNot found csv rows\n", Console::FG_RED);        }    }    public function actionImportSaleItemsPropertyLists()    {        $this->importSaleItemsPropertyLists();        $counter = 0;        $handle = fopen($this->importSaleItemsPropertyLists->rootPath, "r");        $count = $this->importSaleItemsPropertyLists->countRows();        Console::startProgress(0, $count, 'Processed: ', false);        while (($data = fgetcsv($handle)) !== false) {            $counter++;            $row = SaleItemProperyListModel::createFromCsvRow($data);            if ($counter === 1) {                continue;            }            Console::updateProgress($counter, $count);            if ($row->addValue()) {//                $this->stdout("\tЗначение {$row->column6} успешно добавлено в справочник {$row->column1}!\n", Console::FG_GREEN);            } else {                $this->errorRows = [ 'data' => $data, 'errors' => $row->getErrors() ];//                $this->stdout("\tЗначение {$row->column6} не добавлено в {$row->column1}!\n", Console::FG_RED);            }        }        fclose($handle);        Console::endProgress();        $this->showErrors('Property lists');    }    /**     * Добавить дополнительные свойства к сущностям     */    public function actionAddAdditionalProperties()    {        $productProperties = [            [                'content_id' => ProductPropertyModel::TREE_TYPE_PRODUCT_PROPERTIES_ID,                'code' => 'expertText',                'name' => 'Мнение эксперта',                'property_type' => 'S',                'list_type' => 'L',                'is_required' => Cms::BOOL_N,                'component' => 'skeeks\cms\relatedProperties\userPropertyTypes\UserPropertyTypeComboText',                'component_settings' => 'a:5:{s:4:"code";s:1:"S";s:4:"name";s:24:"Текст/CKEditor/HTML";s:2:"id";s:72:"skeeks\cms\relatedProperties\userPropertyTypes\UserPropertyTypeComboText";s:8:"property";a:24:{s:2:"id";i:212;s:10:"created_by";i:1;s:10:"updated_by";i:1;s:10:"created_at";i:1490089638;s:10:"updated_at";i:1490089638;s:4:"name";s:29:"Мнение эксперта";s:4:"code";s:10:"expertText";s:10:"content_id";s:1:"2";s:6:"active";s:1:"Y";s:8:"priority";s:3:"500";s:13:"property_type";s:1:"S";s:9:"list_type";s:1:"L";s:8:"multiple";s:1:"N";s:12:"multiple_cnt";N;s:16:"with_description";s:1:"N";s:10:"searchable";s:1:"N";s:9:"filtrable";s:1:"N";s:11:"is_required";s:1:"N";s:7:"version";i:1;s:9:"component";s:72:"skeeks\cms\relatedProperties\userPropertyTypes\UserPropertyTypeComboText";s:18:"component_settings";a:5:{s:4:"code";s:1:"S";s:4:"name";s:24:"Текст/CKEditor/HTML";s:2:"id";s:72:"skeeks\cms\relatedProperties\userPropertyTypes\UserPropertyTypeComboText";s:8:"property";a:15:{s:6:"active";s:1:"Y";s:8:"priority";s:3:"500";s:13:"property_type";s:1:"S";s:9:"list_type";s:1:"L";s:8:"multiple";s:1:"N";s:10:"searchable";s:1:"N";s:9:"filtrable";s:1:"N";s:7:"version";i:1;s:15:"smart_filtrable";s:1:"N";s:11:"is_required";s:1:"N";s:4:"name";s:29:"Мнение эксперта";s:4:"code";s:10:"expertText";s:9:"component";s:72:"skeeks\cms\relatedProperties\userPropertyTypes\UserPropertyTypeComboText";s:4:"hint";s:0:"";s:10:"content_id";s:1:"2";}s:10:"activeForm";N;}s:4:"hint";s:0:"";s:15:"smart_filtrable";s:1:"N";s:9:"vendor_id";N;}s:10:"activeForm";N;}',            ],            [                'content_id' => ProductPropertyModel::TREE_TYPE_PRODUCT_PROPERTIES_ID,                'code' => 'expert',                'name' => 'Эксперт',                'property_type' => 'S',                'list_type' => 'L',                'is_required' => Cms::BOOL_N,                'component' => 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement',                'component_settings' => 'a:7:{s:4:"code";s:1:"E";s:4:"name";s:36:"Привязка к элементу";s:12:"fieldElement";s:6:"select";s:10:"content_id";s:2:"13";s:2:"id";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:8:"property";a:24:{s:2:"id";i:215;s:10:"created_by";i:1;s:10:"updated_by";i:1;s:10:"created_at";i:1490096944;s:10:"updated_at";i:1490096944;s:4:"name";s:14:"Эксперт";s:4:"code";s:6:"expert";s:10:"content_id";s:1:"2";s:6:"active";s:1:"Y";s:8:"priority";s:3:"500";s:13:"property_type";s:1:"S";s:9:"list_type";s:1:"L";s:8:"multiple";s:1:"N";s:12:"multiple_cnt";N;s:16:"with_description";s:1:"N";s:10:"searchable";s:1:"N";s:9:"filtrable";s:1:"N";s:11:"is_required";s:1:"N";s:7:"version";i:1;s:9:"component";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:18:"component_settings";a:7:{s:4:"code";s:1:"E";s:4:"name";s:36:"Привязка к элементу";s:12:"fieldElement";s:6:"select";s:10:"content_id";s:2:"13";s:2:"id";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:8:"property";a:15:{s:6:"active";s:1:"Y";s:8:"priority";s:3:"500";s:13:"property_type";s:1:"S";s:9:"list_type";s:1:"L";s:8:"multiple";s:1:"N";s:10:"searchable";s:1:"N";s:9:"filtrable";s:1:"N";s:7:"version";i:1;s:15:"smart_filtrable";s:1:"N";s:11:"is_required";s:0:"";s:4:"name";s:14:"Эксперт";s:4:"code";s:6:"expert";s:9:"component";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:4:"hint";s:0:"";s:10:"content_id";s:1:"2";}s:10:"activeForm";N;}s:4:"hint";s:0:"";s:15:"smart_filtrable";s:1:"N";s:9:"vendor_id";N;}s:10:"activeForm";N;}',            ],            [                'content_id' => ProductPropertyModel::TREE_TYPE_PRODUCT_PROPERTIES_ID,                'code' => 'similarProducts',                'name' => 'Завершите Ваш образ',                'property_type' => 'S',                'list_type' => 'L',                'is_required' => Cms::BOOL_N,                'multiple' => Cms::BOOL_Y,                'component' => 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement',                'component_settings' => 'a:7:{s:4:"code";s:1:"E";s:4:"name";s:36:"Привязка к элементу";s:12:"fieldElement";s:11:"selectMulti";s:10:"content_id";s:1:"2";s:2:"id";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:8:"property";a:24:{s:2:"id";i:218;s:10:"created_by";i:1;s:10:"updated_by";i:1;s:10:"created_at";i:1490098004;s:10:"updated_at";i:1490100625;s:4:"name";s:36:"Завершите Ваш образ";s:4:"code";s:15:"similarProducts";s:10:"content_id";s:1:"2";s:6:"active";s:1:"Y";s:8:"priority";s:3:"500";s:13:"property_type";s:1:"S";s:9:"list_type";s:1:"L";s:8:"multiple";s:1:"Y";s:12:"multiple_cnt";N;s:16:"with_description";s:1:"N";s:10:"searchable";s:1:"N";s:9:"filtrable";s:1:"N";s:11:"is_required";s:1:"N";s:7:"version";i:1;s:9:"component";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:18:"component_settings";a:7:{s:4:"code";s:1:"E";s:4:"name";s:36:"Привязка к элементу";s:12:"fieldElement";s:11:"selectMulti";s:10:"content_id";s:1:"2";s:2:"id";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:8:"property";a:24:{s:2:"id";i:218;s:10:"created_by";i:1;s:10:"updated_by";i:1;s:10:"created_at";i:1490098004;s:10:"updated_at";i:1490098004;s:4:"name";s:36:"Завершите Ваш образ";s:4:"code";s:15:"similarProducts";s:10:"content_id";s:1:"2";s:6:"active";s:1:"Y";s:8:"priority";s:3:"500";s:13:"property_type";s:1:"S";s:9:"list_type";s:1:"L";s:8:"multiple";s:1:"N";s:12:"multiple_cnt";N;s:16:"with_description";s:1:"N";s:10:"searchable";s:1:"N";s:9:"filtrable";s:1:"N";s:11:"is_required";s:1:"N";s:7:"version";i:1;s:9:"component";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:18:"component_settings";a:7:{s:4:"code";s:1:"E";s:4:"name";s:36:"Привязка к элементу";s:12:"fieldElement";s:6:"select";s:10:"content_id";s:1:"2";s:2:"id";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:8:"property";a:15:{s:6:"active";s:1:"Y";s:8:"priority";s:3:"500";s:13:"property_type";s:1:"S";s:9:"list_type";s:1:"L";s:8:"multiple";s:1:"N";s:10:"searchable";s:1:"N";s:9:"filtrable";s:1:"N";s:7:"version";i:1;s:15:"smart_filtrable";s:1:"N";s:11:"is_required";s:0:"";s:4:"name";s:36:"Завершите Ваш образ";s:4:"code";s:15:"similarProducts";s:9:"component";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:4:"hint";s:0:"";s:10:"content_id";s:1:"2";}s:10:"activeForm";N;}s:4:"hint";s:0:"";s:15:"smart_filtrable";s:1:"N";s:9:"vendor_id";N;}s:10:"activeForm";N;}s:4:"hint";s:0:"";s:15:"smart_filtrable";s:1:"N";s:9:"vendor_id";N;}s:10:"activeForm";N;}',            ],        ];        $counter = 0;        $count = count($productProperties);        Console::startProgress(0, $count, 'Processed: ', false);        foreach ($productProperties as $property) {            $counter++;            $newProperty = new ProductPropertyModel();            if ($newProperty->addNewProperty($property)) {//                $this->stdout("\tНовое свойство {$property['name']} успешно добавлено!\n", Console::FG_GREEN);            } else {                $this->errorRows[] = [ 'data' => $property, 'errors' => $newProperty->getErrors() ];//                $this->stdout("\tСвойство {$property['name']} не добавлено!\n", Console::FG_RED);            }            Console::updateProgress($counter, $count);        }        Console::endProgress();        $this->showErrors('Add additional properties');    }    /**     * Добавить дополнительные справочники или элементы контента     */    public function actionAddNewCmsContent()    {        $cmsContents = [            [ //Справочник со списком экспертов                'name' => 'Эксперты',                'code' => 'experts',                'description' => 'Справочник с экспертами для функции "мнения экспертов" в товарах',                'content_type' => 'info',                'properties' => [                    [                        'code' => 'userId',                        'name' => 'Ид пользователя в системе',                        'property_type' => 'S',                        'list_type' => 'L',                        'is_required' => Cms::BOOL_N,                        'component' => 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeNumber',                    ],                ],                'elements' => [                    [                        'name' => 'Ольга Мокшина',                    ],                ],            ],            [ //Управление ЦТС                'name' => 'Товары только сегодня',                'code' => 'cts',                'description' => 'Товары только сегодня',                'content_type' => 'services',                'properties' => [                    [                        'code' => 'productId',                        'name' => 'Ид товара',                        'property_type' => 'S',                        'list_type' => 'L',                        'is_required' => Cms::BOOL_Y,                        'component' => 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeNumber',                    ],                ]            ],        ];        $counter = 0;        $count = count($cmsContents);        Console::startProgress(0, $count, 'Processed: ', false);        foreach ($cmsContents as $content) {            $counter++;            $newContent = new CmsContent();            if ($newContent->createContent($content)) {//                $this->stdout("\tНовый контент {$content['name']} успешно добавлен!\n", Console::FG_GREEN);            } else {                $this->errorRows[] = $newContent->attributes;//                $this->stdout("\tНовый контент {$content['name']} не добавлен!\n", Console::FG_RED);            }            Console::updateProgress($counter, $count);        }        Console::endProgress();        $this->showErrors('actionAddNewCmsContent');    }    /**     * Remove photo     */    public function actionRemovePhoto()    {        return;        try {            $find = CmsStorageFile::find()                ->andWhere(['>=', 'created_at', strtotime(date('Y-m-d'))]);            $counter = 0;            $count = $find->count();            $this->stdout("Всего фоток по этому условию: " . $count . "\n");            Console::startProgress(0, $count);            foreach ($find->all() as $file) {                $counter++;                /**                 * @var $file CmsStorageFile                 */                if ($file->delete()) {                    Console::updateProgress($counter, $count);                    $this->stdout("\tФотка удалена: " . $file->id . "\n", Console::FG_GREEN);                } else {                    //throw new Exception("Not deleted: " . $cmsContentElement->id);                    $this->stdout("\tNot deleted:: " . $file->id . "\n", Console::FG_RED);                }            }            Console::endProgress();        } catch (\Exception $e) {            $this->stdout($e->getMessage(), Console::FG_RED);        }    }    protected function importItemsPropertyValues()    {        $this->importItemsPropertiesValues = new ImportItemsPropertiesValues();        $this->stdout("File importing: {$this->importItemsPropertiesValues->rootPath}\n", Console::BOLD);        if ($this->importItemsPropertiesValues->countRows() > 0) {            $this->stdout("\tFound csv rows: {$this->importItemsPropertiesValues->countRows()}\n", Console::FG_GREEN);        } else {            $this->stdout("\tNot found csv rows\n", Console::FG_RED);        }    }    public function actionLoadItemProperties()    {        $this->importItemsPropertyValues();        $counter = 0;        $handle = fopen($this->importItemsPropertiesValues->rootPath, "r");        $countFileRows = $this->importItemsPropertiesValues->countRows();        $products = $saleItems = $props = $lists = $listsElements = $enums = [];        $connection = \Yii::$app->getDb();        $results = $connection->createCommand('SELECT id, bitrix_id FROM cms_content_element WHERE content_id in (2,10) limit 0,100000000')->queryAll();        $count = count($results);        Console::startProgress(0, $count, 'Products: ', false);        foreach ($results as $k => $p) {            $products[$p['bitrix_id']] = $p['id'];            Console::updateProgress($k, $count);        }        Console::endProgress();        $this->stdout("Result count: ".count($products)."\n\n\n");        $results = $connection->createCommand('SELECT id, code, component FROM cms_content_property WHERE content_id IN (2,10)')->queryAll();        $count = count($results);        Console::startProgress(0, $count, 'Props: ', false);        foreach ($results as $k => $p) {            $props[$p['code']] = $p;            Console::updateProgress($k, $count);        }        Console::endProgress();        $this->stdout("Result count: ".count($props)."\n\n\n");        $results = $connection->createCommand('select id, code from cms_content')->queryAll();        $count = count($results);        Console::startProgress(0, $count, 'Lists: ', false);        foreach ($results as $k => $p) {            $lists[$p['code']] = $p;            Console::updateProgress($k, $count);        }        Console::endProgress();        $this->stdout("Result count: ".count($lists)."\n\n\n");        $results = $connection->createCommand('select id, code, name from cms_content_element where content_id > 92')->queryAll();        $count = count($results);        Console::startProgress(0, $count, 'List elements: ', false);        foreach ($results as $k => $p) {            $listsElements[$p['id']] = $p;            Console::updateProgress($k, $count);        }        Console::endProgress();        $this->stdout("Result count: ".count($listsElements)."\n\n\n");        $results = $connection->createCommand('select id, value from cms_content_property_enum')->queryAll();        $count = count($results);        Console::startProgress(0, $count, 'Enum elements: ', false);        foreach ($results as $k => $p) {            $enums[$p['id']] = $p;            Console::updateProgress($k, $count);        }        Console::endProgress();        $this->stdout("Result count: ".count($enums)."\n\n\n");        Console::startProgress(0, $countFileRows, 'Processed: ', false);//        $handleSqlFile = fopen('/home/vk/element_props_insert', "w");        $_insertValues = [];        $_query = 'INSERT INTO '.CmsContentElementProperty::tableName().' (created_at, updated_at, property_id, element_id, value, value_enum, value_num) VALUES ';//        fwrite($handleSqlFile, $_query);        while (($data = fgetcsv($handle)) !== false) {            $counter++;            if ( $counter === 1 || strlen($data[2]) < 1 || preg_match('/^PRICE_.*$/xi', $data[1]) == true || $data[1] == 'CML2_LINK' || ! array_key_exists($data[1], $props) ) {                continue;            }            if ( 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement' == $props[$data[1]]['component'] ) {                $cmsContentPropertyElementId = null;                $cmsContentPropertyElementId = array_shift(array_filter($listsElements, function($innerArray) use ($data){                    return in_array($data[2], [ $innerArray['name'], $innerArray['code'] ]);                }));               if ( ! is_array($cmsContentPropertyElementId)  ) {                   $this->errorRows['not found propcontent element'][] = $data;//                   var_dump($cmsContentPropertyElementId, $data);//                   return;                   continue;               } elseif ( empty($cmsContentPropertyElementId['id']) ) {//                   var_dump($cmsContentPropertyElementId);//                   return;               }//                   var_dump($data);//                if ( $cmsContentPropertyElementId ) {//                    echo " -> ".$data[1]. " - ".$data[2] . " -> ".$cmsContentPropertyElementId."\n";//                }            }//            return;            $_queryValues = '';            /** Проверить заведен ли такой товар */            /** @var CmsContentElement $shopItem *///            $shopItem = ShopContentElement::find()//                ->andWhere(['bitrix_id' => (int) $data[0]])//                ->limit(1)//                ->one();//            if ( $shopItem === null) {            if ( ! array_key_exists($data[0], $products) ) {                $this->errorRows['not found'][] = $data[0];//                echo "Item not found: ".$data[0]." \n";                continue;            }            $shopItemId = $products[$data[0]];//            $shopProduct = $shopItem->shopProduct;            /** Проверить заведено ли свойство *///            if ( $shopItem->relatedPropertiesModel->getRelatedProperty($data[1]) === false ) {//                $this->stdout("\tСвойство элемента {$data[1]}  не существует!\n", Console::FG_RED);//                continue;//            }            /** @var RelatedPropertyModel $property *///            $property = $shopItem->relatedPropertiesModel->getRelatedProperty($data[1]);//            if ( $property === null ) {            if ( ! array_key_exists($data[1], $props) ) {                $this->errorRows['not found prop'][] = [ $data[0], $data[1] ];//                $this->stdout("Свойство элемента {$data[1]}  не существует!\n", Console::FG_RED);                continue;            }            Console::updateProgress($counter, $countFileRows);            $propertyId = $props[$data[1]]['id'];//            $_queryValues = '(' . time() . ' ,' .time() . ', ' . $property->id . ', ' . $shopItem->id . ', ';            $_queryValues = '(' . time() . ' ,' .time() . ', ' . $propertyId . ', ' . $shopItemId . ', ';//            if ( in_array($property->component, ['skeeks\cms\relatedProperties\propertyTypes\PropertyTypeList',])) {            if ( 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeList' == $props[$data[1]]['component'] ) {//                if ( $enum = $property->getEnums()->andWhere(['value' => $data[2] ])->one() ) {                if ( $enumId = array_search($data[2], $enums ) ) {                } else {                    /** @var CmsContentElementProperty $enum */                    $enum = new CmsContentPropertyEnum();                    $enum->value = $data[2];                    $enum->property_id = array_search($data[1], $props);                    $enum->save();                    $enumId = $enum->id;                }//                if ($enum && !$enum->isNewRecord) {//                    $_queryValues .= $enum->id . ', ' . $enum->id . ', ' . $enum->id;//                }                if ( $enumId !== null )                    $_queryValues .= $enumId . ', ' . $enumId . ', ' . $enumId;//            } elseif (in_array($property->component, ['skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement',])) {            } elseif ( 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement' == $props[$data[1]]['component'] ) {//                $cmsContent = CmsContent::find()//                    ->andWhere('code = :code', [':code' => $data[1]])//                    ->limit(1)//                    ->one();//                if (!$cmsContent) {//                    $this->errorRows['not found content'][] = $data;//                    $this->stdout("\tНет справочника {$data[1]}!\n Data: " . json_encode($data) . "\n", Console::FG_RED);//                    continue;//                }                $data[2] = strtr($data[2], ['/' => '_', ' ' => '-']);//                $cmsContentProperty = CmsContentElement::find()//                    ->andWhere(['content_id' => $cmsContent->id])//                    ->andWhere($data['1'] == 'COLOR_REF' ? ['code' => $data[2]] : ['bitrix_id' => $data[2]])//                    ->limit(1)//                    ->one();//                if ($cmsContentProperty === null)//                if ( $cmsContentPropertyElementId !== null )//                {//                    $this->errorRows['not found content element'][] = $data;//////                    continue;////                    $this->stdout("\tНет значения {$data[2]} в справочнике {$cmsContent->name}!\n Data: " . json_encode($data) . "\n", Console::FG_RED);//                    continue;//                }//                $_queryValues .= $cmsContentProperty->id . ', ' . $cmsContentProperty->id . ', ' . $cmsContentProperty->id;                $_queryValues .= $cmsContentPropertyElementId['id'] . ', ' . $cmsContentPropertyElementId['id'] . ', ' . $cmsContentPropertyElementId['id'];            }            elseif ( in_array($props[$data[1]]['component'], [                'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeString',                'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeText'            ]) ) {                $_queryValues .= '"' . Html::encode($data[2]) . '", 0, 0';//                $shopItem->relatedPropertiesModel->setAttribute($data[1], $data[2]);            }            else {                $_queryValues .= '"'. $data[2] . '", "' . $data[2] . '", "' . $data[2] . '"';            }//           fwrite($handleSqlFile, $_queryValues .'),'."\n");//            echo $_queryValues;//            $shopItem->relatedPropertiesModel->save();//            if ( $shopItem->relatedPropertiesModel->validate() ) {//            try {//            if ( count($_insertValues)  )                $command = $connection->createCommand($_query . $_queryValues . ')')->execute();//            } catch (\Exception $e){//                $this->errorRows['query error'][] = [ $data, $e, $_query . $_queryValues . ')'];//////                $this->stdout("\tПроблема с запросом!\n Query: " . $_query . $_queryValues . ')' . "\n", Console::FG_RED);//                continue;//            }//                $this->stdout("\t{$shopItem->name} - {$property->code}!\n", Console::FG_GREEN);//            } else {//                $this->stdout(json_encode([ 'data' => $data, 'errors' => $shopItem->relatedPropertiesModel->getErrors() ]));//            }//            if ($row->addValue()) {//                $this->stdout("\tЗначение {$row->column6} успешно добавлено в справочник {$row->column1}!\n", Console::FG_GREEN);//            } else {//                $this->stdout("\tЗначение {$row->column6} не добавлено в {$row->column1}!\n", Console::FG_RED);//            }//            fclose($handle);//            Console::endProgress();//            \Yii::$app->end();        }        $this->stdout("\n\nGot: ".count($_insertValues)." values to insert\n\n");        fclose($handle);//        fclose($handleSqlFile);        Console::endProgress();//        $this->showErrors('item props');    }}