<?php/** * php ./yii imports/shop-and-show-replica/only-update-price */namespace console\controllers\imports;use common\models\cmsContent\CmsContent;use common\models\cmsContent\CmsContentProperty;use skeeks\cms\models\CmsContentPropertyEnum;use console\models\imports\ImportCategories;use console\models\imports\ImportItemsPropertiesValues;use console\models\imports\ImportItemsPropertyValues;use console\models\imports\ImportModification;use console\models\imports\ImportPhoto;use console\models\imports\ImportProduct;use console\models\imports\ImportProductProperties;use console\models\imports\ImportProductSaleProperties;use console\models\imports\ImportSaleProduct;use console\models\imports\ImportSearchColor;use console\models\imports\ImportSaleItemsPropertyLists;use console\models\imports\ImportActivePrice;use console\models\sas\ActivePriceModel;use console\models\sas\CategoryModel;use console\models\sas\ModificationModel;use console\models\sas\PhotoModel;use console\models\sas\ProductModel;use console\models\sas\ProductPropertyModel;use console\models\sas\ProductSaleModel;use console\models\sas\SearchColorModel;use console\models\sas\SaleItemProperyListModel;use skeeks\cms\components\Cms;use skeeks\cms\Exception;use skeeks\cms\mail\helpers\Html;use skeeks\cms\models\CmsContentElement;use skeeks\cms\models\CmsContentElementProperty;use skeeks\cms\models\CmsStorageFile;use skeeks\cms\models\CmsTree;use skeeks\cms\models\CmsUser;use skeeks\cms\relatedProperties\models\RelatedPropertyModel;use skeeks\cms\shop\models\ShopCmsContentElement;use skeeks\cms\shop\models\ShopTypePrice;use skeeks\sx\File;use Yii;use yii\db\Connection;use yii\helpers\Console;use yii\helpers\FileHelper;use modules\shopandshow\models\shop\ShopContentElement;/** * Class ShopAndShowReplicaController * * @package console\controllers */class ShopAndShowReplicaController extends \yii\console\Controller{    /** @var Connection */    protected $frontDb;    /** @var  Connection */    protected $db;    /** @var  CmsUser */    protected $user;    const        BITRIX_PRODUCTS_IBLOCK_ID = 10,     // Товары        BITRIX_SALE_ITEMS_IBLOCK_ID = 11,   // Модификации        SITE_PRODUCTS_CONTENT_ID = 2,       // Товары        SITE_SALE_ITEMS_CONTENT_ID = 10;    // Модификации    protected        $ignoredIblockPropertyCodes = [            'TYPE_PRICE_ACTIVE_BEFORE_SPP', 'VALUE_PRICE_BASE_BEFORE_SPP', 'VALUE_PRICE_BASE_BEFORE_SPP', 'SPECIALPROMO_PRIORITY', 'SPECIALPROMO_TYPE', 'PRICE_PRIVATE_SALE', 'TYPE_PRICE_ACTIVE_BEFORE_SC', 'VALUE_PRICE_SALE_BEFORE_SC', 'VALUE_PRICE_BASE_BEFORE_SC', 'SHOPPINGCLUB_PRIORITY', 'SHOPPINGCLUB_ACTIVE', 'TYPE_PRICE_ACTIVE_BEFORE_CM', 'VALUE_PRICE_SALE_BEFORE_CM', 'VALUE_PRICE_BASE_BEFORE_CM', 'CYBERMONDAY_PRIORITY', 'CYBERMONDAY_ACTIVE', 'NO_MARKET', 'PRICE_CATALOG_N2_1C', 'PRICE_CATALOG_N2', 'IN_MAGAZINE', 'CATALOGS', 'ONE_ITEM_SALE', 'NO_BRAND_PACKSHOTS', 'SUPPLIER_RULES', 'ORDER_COUNT_ANALYTIC', 'ORDER_COUNT_BUYER', 'CONTRACT_NUMBER_SUPPLIER', 'PURCHASE_PRICE_1C', 'TEXT_PACKSHOT', 'DOC_STATUS', 'TEST_RESULT', 'BP_STATUS', 'TEXT_MODS', 'RATING', 'VOTE_SUM', 'VOTE_COUNT', 'PRICE_CATALOG_1C', 'PLUS_BUY', 'BUYER', 'PRICE_SALE_1C', 'NOTES', 'PRICE_TODAY_1C', 'PRICE_DISCOUNTED_1C', 'PRICE_BASE_1C', 'GOODS_1C', 'WEIGHT_MODS_DIFFERENT', 'MAXIMUM_PRICE', 'MINIMUM_PRICE', 'PERIOD_PRICE', 'ACTION_REF', 'PRODUCTION_TEXT', 'SEARCH_PRICE', 'FRONT_NOTE', 'EXIST_IN_OTHER_CITY', 'EXIST_IN_MOSCOW', 'TV_SHOW', 'COUNT_1C', 'FRONT_NOTE', 'BRAND', 'INSTRUCTION', 'SUPPLY_DAYS', 'REST', 'ACTION_REF_DATE', 'STORE_V1', 'RECEIPT', 'LOT_STATUS', 'PHOTOS', 'TYPE_PRICE_ACTIVE_BEFORE_SPP', 'VALUE_PRICE_BASE_BEFORE_SPP', 'VALUE_PRICE_BASE_BEFORE_SPP', 'SPECIALPROMO_PRIORITY', 'SPECIALPROMO_TYPE', 'VALUE_PRICE_ACTIVE_BEFORE_SP', 'TYPE_PRICE_ACTIVE_BEFORE_SP', 'USE_SANDS_PROMO', 'ITEM_SANDS_PROMO', 'MAIN_PHOTO', 'SUBJECT_PHOTO', 'ART_SUPPLIER', 'PURCHASE_PRICE', 'PRICE_CATALOG', 'CERTIFICATES', 'NAME_PARAMETER1', 'NAME_PARAMETER2', 'SPECIALPROMO_TYPE_TEST', 'SPECIALPROMO_PRICE_BASE_TEST', 'SPECIALPROMO_PRICE_SALE_TEST', 'ONAIR', 'PRICE_MODS_DIFFERENT', 'GOODS_1C', 'ONE_ITEM_SALE', 'PARAMETER1', 'PARAMETER2'        ];    protected        $componentSettings = 'a:7:{s:4:"code";s:1:"E";s:4:"name";s:36:"Привязка к элементу";s:12:"fieldElement";s:6:"select";s:10:"content_id";s:2:"80";s:2:"id";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:8:"property";a:15:{s:6:"active";s:1:"Y";s:8:"priority";s:3:"500";s:13:"property_type";s:1:"S";s:9:"list_type";s:1:"L";s:8:"multiple";s:1:"N";s:10:"searchable";s:1:"N";s:9:"filtrable";s:1:"N";s:7:"version";i:1;s:15:"smart_filtrable";s:1:"N";s:11:"is_required";s:0:"";s:4:"name";s:4:"test";s:4:"code";s:5:"XXXXX";s:9:"component";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:4:"hint";s:0:"";s:10:"content_id";s:2:"10";}s:10:"activeForm";N;}';    protected        $colorSearchPropertyCssStyles = [            1392 => 'background:#ff3883',            1402 => 'background:#732907',            1399 => 'background:#ff0303',            1401 => 'background:#ff7200',            1403 => 'background:#ffdb00',            1395 => 'background:#61c659',            1391 => 'background:#7fd3ff',            1400 => 'background:#3a59b5',            1390 => 'background:#8047f5',            1396 => 'background:#000000',            1394 => 'background:#8f8f8f',            1397 => 'background:#fde9d3',            1393 => 'background:#fff; border:1px solid #a5a5a5;',            1404 => 'background:rgba(232,68,39,1); background:-moz-linear-gradient(left, rgba(232,68,39,1) 0%, rgba(228,232,18,1) 26%, rgba(15,138,15,1) 52%, rgba(73,237,229,1) 75%, rgba(39,39,230,1) 100%);background:-webkit-gradient(left top, right top, color-stop(0%, rgba(232,68,39,1)), color-stop(26%, rgba(228,232,18,1)), color-stop(52%, rgba(15,138,15,1)), color-stop(75%, rgba(73,237,229,1)), color-stop(100%, rgba(39,39,230,1)));background:-webkit-linear-gradient(left, rgba(232,68,39,1) 0%, rgba(228,232,18,1) 26%, rgba(15,138,15,1) 52%, rgba(73,237,229,1) 75%, rgba(39,39,230,1) 100%);background:-o-linear-gradient(left, rgba(232,68,39,1) 0%, rgba(228,232,18,1) 26%, rgba(15,138,15,1) 52%, rgba(73,237,229,1) 75%, rgba(39,39,230,1) 100%);background:-ms-linear-gradient(left, rgba(232,68,39,1) 0%, rgba(228,232,18,1) 26%, rgba(15,138,15,1) 52%, rgba(73,237,229,1) 75%, rgba(39,39,230,1) 100%);background:linear-gradient(to right, rgba(232,68,39,1) 0%, rgba(228,232,18,1) 26%, rgba(15,138,15,1) 52%, rgba(73,237,229,1) 75%, rgba(39,39,230,1) 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr="#e84427", endColorstr="#2727e6", GradientType=1 );',            1398 => ''    ];    protected static        $categories,        $priceTypes,        $productProperties,        $offerProperties;    public function beforeAction($action)    {        /** No mercy */        ini_set('memory_limit', '-1');        /** Init DB connections */        $this->getDb();        $this->getReplica();        /** Get cms SyncWorker user */        $this->createSyncWorkerUser();        return true;    }    protected function getReplica(){        if ( $this->frontDb !== null )            return $this->frontDb;        $this->frontDb = \Yii::$app->get('front_db');    }    protected function getDb(){        if ( $this->db !== null )            return $this->db;        $this->db = \Yii::$app->get('test_db');    }    protected function getCategory($bitrixId){        if (isset(self::$categories[$bitrixId])) {            return self::$categories[$bitrixId];        } else {            $tree = CmsTree::find()                ->joinWith('relatedElementProperties map')                ->joinWith('relatedElementProperties.property property')                ->andWhere(['property.code' => 'vendorid'])                ->andWhere(['map.value' => $bitrixId])//            ->joinWith('treeType as ttype')//            ->andWhere(['ttype.code' => 'catalog'])                ->limit(1)                ->one();            if ($tree) {                return self::$categories[$bitrixId] = $tree;            }        }        return null;    }    protected function getPriceTypes(){        if (isset(self::$priceTypes)) {            return self::$priceTypes;        } else {            $priceTypes = ShopTypePrice::find()                ->all();            if ($priceTypes) {                foreach ($priceTypes as $type)                    self::$priceTypes[$type->code] = $type;                return self::$priceTypes;            }        }        return null;    }    public function actionInit()    {        $this->createPriceTypes();        $this->createSimpleItemsProperties();        $this->createReferenceItemsProperties();        $this->createReferencePropertiesValues();//        $this->createColorReferenceProperty();//        $this->createColorReferenceValues();//        $this->syncColorSearch();//        $this->syncColorReference();    }    public function actionOnlyUpdatePrice(){        $this->pricesIndex();    }    public function actionItems()    {        $this->actionCreateProducts();        $this->actionCreateOffers();//        $this->syncPhotos();        $this->itemPrices();        $this->activePriceType();        $this->pricesIndex();        $this->textProperties();        $this->integerProperties();        $this->elementProperties();        $this->updateCounters(); //Обновление счетчиков    }    protected function createSyncWorkerUser()    {        $this->stdout("Create SyncWorker cms User\n", Console::FG_CYAN);        /** @var CmsUser $user */        $user = CmsUser::findByUsername('sync_worker');        if ( $user === null ) {            $user = new CmsUser();            $user->created_at = time();            $user->updated_at = time();            $user->email = 'sync-worker@shopandshow.ru';            $user->email_is_approved = 1;            $user->username = 'sync_worker';            try {                $user->save();            } catch (\yii\db\Exception $e) {                $this->stdout("Cant create cms user for SyncWorker\n", Console::FG_RED);                Yii::$app->end();            }        }        $user->refresh();        $user->id = 1;        $this->user = $user;        return true;    }    protected function createPriceTypes()    {        $startTime = time();        $this->stdout("Create Price types\n", Console::FG_CYAN);        try {            $this->fixTableCollation('ss_web_sync.shop_type_price');        } catch (\yii\db\Exception $e) {            $this->stdout("Can't change collation for table ss_web_sync.shop_type_price\n{$e}", Console::FG_RED);            return;        }        $sql = <<<SQL            INSERT INTO ss_web_sync.shop_type_price (id, created_by, updated_by, created_at, updated_at, code, name, priority)            SELECT                CASE WHEN stp.id IS NOT NULL THEN stp.id ELSE NULL END as id,                stp.created_by,                stp.updated_by,                CASE WHEN stp.created_at IS NOT NULL THEN stp.created_at ELSE UNIX_TIMESTAMP() END as created_at,                CASE WHEN stp.updated_at IS NOT NULL THEN stp.updated_at ELSE UNIX_TIMESTAMP() END as updated_at,                TRIM(LEADING 'PRICE_' FROM pa.XML_ID) as code,                pa.VALUE as name,                pa.SORT as priority            from front2.b_iblock_property_enum pa            left join ss_web_sync.shop_type_price stp ON stp.CODE=TRIM(LEADING 'PRICE_' FROM pa.XML_ID)            WHERE pa.PROPERTY_ID=88            ON DUPLICATE KEY UPDATE                updated_at=VALUES(updated_at),                code=VALUES(code),                name=VALUES(name),                priority=VALUES(priority);SQL;        $this->stdout("Syncing price types", Console::FG_YELLOW);        $affected = $this->db->createCommand($sql)->execute();        $this->stdout(" done. Affected {$affected} rows\n", Console::FG_GREEN);        $this->stdout("\n\nDone in ".(time()-$startTime)."sec\n\n", Console::FG_GREEN);        return true;    }    protected function createSimpleItemsProperties()    {        $startTime = time();        $this->stdout("Create Product/Offer properties. Types: strings and ints\n", Console::FG_CYAN);        try {            $this->fixTableCollation('ss_web_sync.cms_content_property');        } catch (\yii\db\Exception $e) {            $this->stdout("Can't change collation for table ss_web_sync.cms_content_property\n", Console::FG_RED);            return false;        }        $sql = "            select                ip.id,                (case when ccp.created_at is not null then ccp.created_at else unix_timestamp(ip.timestamp_x) end) as created_at,                unix_timestamp(ip.timestamp_x) as updated_at,                (case when ip.iblock_id=10 then 2 else                    case when ip.iblock_id=11 then 10 else null end                end) as content_id,                ip.code,                ip.active,                ip.name,                ip.hint,                ip.multiple,                (case when ip.multiple='Y' then ip.multiple_cnt else null END) as multiple_cnt,                ip.property_type,                (case when ip.property_type = 'S' and ip.row_count > 1 then 1 else 0 end) as is_textarea,                ip.SORT as priority                from front2.b_iblock_property ip                left join ss_web_sync.cms_content_property ccp ON ccp.code=ip.code                where                     ip.iblock_id in (10,11)                    and ccp.vendor_id is null                    and ip.property_type in ('S','N')                    and ip.code NOT LIKE 'PRICE_%'                    and ip.code NOT LIKE '%_REF'                    and ip.code NOT IN ('".implode("', '", $this->ignoredIblockPropertyCodes)."')";        $bitrixProps = $this->db->createCommand($sql)->queryAll();        if ( !$bitrixProps || count($bitrixProps) < 1 ) {            $this->stdout("No new props at replica\n\n");//            // Yii::$app->end();        }        $this->stdout("Got new Props: ".count($bitrixProps)."\n\n", Console::FG_GREEN);        $affected = $processed = 0;        $total = count($bitrixProps);        foreach ( $bitrixProps as $prop )        {            ++$affected;            $this->stdout("\n[{$affected} of {$total}] >> ", Console::FG_GREEN);            $this->stdout("Property: {$prop['id']} - {$prop['name']}", Console::FG_YELLOW);            $component = 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeString';            if ( $prop['property_type'] == 'N' )                $component = 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeNumber';            if ( $prop['property_type'] == 'S' && $prop['is_textarea'] == 1 )                $component = 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeText';            /** Завести content element */            try {                $transaction = $this->db->beginTransaction();                $insertContentProp = trim(sprintf("INSERT INTO ss_web_sync.cms_content_property (                            created_by,                            updated_by,                            created_at,                            updated_at,                            content_id,                            name,                            code,                            property_type,                            list_type,                            multiple,                            multiple_cnt,                            component,                            active,                            vendor_id,                            priority                          ) VALUES (                            %d,                            %d,                            %d,                            %d,                            %d,                            \"%s\",                            \"%s\",                            \"%s\",                            \"%s\",                            \"%s\",                            %d,                            \"%s\",                            \"%s\",                            %d,                            %d                          )",                    $this->user->getId(),                    $this->user->getId(),                    $prop['created_at'],                    $prop['updated_at'],                    $prop['content_id'],                    str_replace(['"','"'],'', $prop['name']),                    $prop['code'],                    $prop['property_type'],                    'L',                    $prop['multiple'],                    $prop['multiple_cnt'],                    $component,                    $prop['active'],                    $prop['id'],                    $prop['priority']                ));                if ( $this->db->createCommand($insertContentProp)->execute() )                    $this->stdout(" -> Ok\n", Console::FG_GREEN);                $transaction->commit();                ++$processed;            } catch (\Exception $e) {                $this->stdout("\tCant create ContentProperty {$e}\n", Console::FG_RED);                $transaction->rollback();                continue;            }        }        $this->stdout("\n\nDone in ".(time()-$startTime)."s. Affected {$affected} of {$total} items. Processed: {$processed}\n\n", Console::FG_GREEN);        return true;    }    protected function createReferenceItemsProperties()    {        $startTime = time();        $this->stdout("Create Product/Offer properties. Types: lists and elements\n", Console::FG_CYAN);        try {            $this->fixTableCollation('ss_web_sync.cms_content_property');        } catch (\yii\db\Exception $e) {            $this->stdout("Can't change collation for table ss_web_sync.cms_content_property\n", Console::FG_RED);            return false;        }        try {            $this->fixTableCollation('ss_web_sync.cms_content');        } catch (\yii\db\Exception $e) {            $this->stdout("Can't change collation for table ss_web_sync.cms_content\n", Console::FG_RED);            return false;        }        $sql = "            select                ip.id,                cc.id as ref_content_id,                (case when ccp.created_at is not null then ccp.created_at else unix_timestamp(ip.timestamp_x) end) as created_at,                unix_timestamp(ip.timestamp_x) as updated_at,                (case when ip.iblock_id=10 then 2 else                    case when ip.iblock_id=11 then 10 else null end                end) as content_id,                ip.code,                ip.active,                ip.name,                ip.hint,                ip.multiple,                (case when ip.multiple='Y' then ip.multiple_cnt else null END) as multiple_cnt,                ip.property_type,                ip.SORT as priority                from front2.b_iblock_property ip                left join ss_web_sync.cms_content_property ccp ON ccp.code=ip.code                left join ss_web_sync.cms_content cc ON ccp.code=ip.code                where                     ip.iblock_id in (10,11)                    and ccp.vendor_id is null                    and (                      ip.property_type in ('E','L')                      and ip.code NOT IN ('" . implode("', '", $this->ignoredIblockPropertyCodes) . "')                    )";        $bitrixProps = $this->db->createCommand($sql)->queryAll();        if ( !$bitrixProps || count($bitrixProps) < 1 ) {            $this->stdout("No new props at replica\n\n");//            // Yii::$app->end();        }        $this->stdout("Got new Props: ".count($bitrixProps)."\n\n", Console::FG_GREEN);        $affected = $processed = 0;        $total = count($bitrixProps);        foreach ( $bitrixProps as $prop )        {            ++$affected;            $this->stdout("\n[{$affected} of {$total}] >> ", Console::FG_GREEN);            $this->stdout("Property: {$prop['id']} - {$prop['name']}", Console::FG_YELLOW);            $component = 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement';            $contentId = 0;            if ( $prop['ref_content_id'] == null ) {                $insertContent = trim(sprintf('INSERT INTO ss_web_sync.cms_content (name, code,created_by,created_at,updated_by,updated_at,name_meny,name_one,content_type) VALUES (%s, "%s", %d,%d,%d,%d,"%s","%s","%s") ON DUPLICATE KEY UPDATE updated_at=VALUES(updated_at),                code=VALUES(code);', $this->db->quoteValue($prop['name']), $prop['code'], $this->user->id, time(), $this->user->id,time(), 'Элементы', 'Элемент','info'));                if ( !$this->db->createCommand($insertContent)->execute() ) {                    $this->stdout('Query: '.$insertContent."\n", Console::FG_GREY);                    throw new \yii\db\Exception($insertContent);                }                $contentId = $this->db->getLastInsertID();            } else {                $contentId = $prop['ref_content_id'];            }            $_componentSettings = unserialize($this->componentSettings);            $_componentSettings['content_id'] = $contentId;            $_componentSettings['property']['name'] = $prop['name'];            $_componentSettings['property']['code'] = $prop['code'];            $_componentSettings['property']['content_id'] = $contentId;            /** Завести content element */            try {                $transaction = $this->db->beginTransaction();                $insertContentProp = trim(sprintf("INSERT INTO ss_web_sync.cms_content_property (                            created_by,                            updated_by,                            created_at,                            updated_at,                            content_id,                            name,                            code,                            property_type,                            list_type,                            multiple,                            multiple_cnt,                            component,                            component_settings,                            active,                            vendor_id,                            priority                          ) VALUES (                            %d,                            %d,                            %d,                            %d,                            %d,                            %s,                            \"%s\",                            \"%s\",                            \"%s\",                            \"%s\",                            %d,                            \"%s\",                            %s,                            \"%s\",                            %d,                            %d                          )",                    $this->user->getId(),                    $this->user->getId(),                    $prop['created_at'],                    $prop['updated_at'],                    $prop['content_id'],                    $this->db->quoteValue($prop['name']),                    $prop['code'],                    $prop['property_type'],                    'L',                    $prop['multiple'],                    $prop['multiple_cnt'],                    $component,                    $this->db->quoteValue(serialize($_componentSettings)),                    $prop['active'],                    $prop['id'],                    $prop['priority']                ));                if ( $this->db->createCommand($insertContentProp)->execute() )                    $this->stdout(" -> Ok\n", Console::FG_GREEN);                $transaction->commit();                ++$processed;            } catch (\Exception $e) {                $this->stdout("\tCant create ContentProperty {$e}\n", Console::FG_RED);                $transaction->rollback();                continue;            }        }        $this->stdout("\n\nDone in ".(time()-$startTime)."s. Affected {$affected} of {$total} items. Processed: {$processed}\n\n", Console::FG_GREEN);        return true;    }    protected function createColorReferenceProperty()    {        $startTime = time();        $this->stdout("Create Product/Offer properties. Types: lists and elements\n", Console::FG_CYAN);        try {            $this->fixTableCollation('ss_web_sync.cms_content_property');        } catch (\yii\db\Exception $e) {            $this->stdout("Can't change collation for table ss_web_sync.cms_content_property\n", Console::FG_RED);            return false;        }        try {            $this->fixTableCollation('ss_web_sync.cms_content');        } catch (\yii\db\Exception $e) {            $this->stdout("Can't change collation for table ss_web_sync.cms_content\n", Console::FG_RED);            return false;        }        $sql = "            select                ip.id,                cc.id as ref_content_id,                (case when ccp.created_at is not null then ccp.created_at else unix_timestamp(ip.timestamp_x) end) as created_at,                unix_timestamp(ip.timestamp_x) as updated_at,                (case when ip.iblock_id=10 then 2 else                    case when ip.iblock_id=11 then 10 else null end                end) as content_id,                ip.code,                ip.active,                ip.name,                ip.hint,                ip.multiple,                (case when ip.multiple='Y' then ip.multiple_cnt else null END) as multiple_cnt,                ip.property_type,                ip.SORT as priority                from front2.b_iblock_property ip                left join ss_web_sync.cms_content_property ccp ON ccp.code=ip.code                left join ss_web_sync.cms_content cc ON ccp.code=ip.code                where                     ip.iblock_id in (10,11)                    and ccp.vendor_id is null                    and (                        ip.property_type in ('S')                        and ip.code LIKE 'COLOR_REF'                    )";        $bitrixProps = $this->db->createCommand($sql)->queryAll();        if ( !$bitrixProps || count($bitrixProps) < 1 ) {            $this->stdout("No new props at replica\n\n");//            // Yii::$app->end();        }        $this->stdout("Got new Props: ".count($bitrixProps)."\n\n", Console::FG_GREEN);        $affected = $processed = 0;        $total = count($bitrixProps);        foreach ( $bitrixProps as $prop )        {            ++$affected;            $this->stdout("\n[{$affected} of {$total}] >> ", Console::FG_GREEN);            $this->stdout("Property: {$prop['id']} - {$prop['name']}", Console::FG_YELLOW);            $component = 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement';            $contentId = 0;            if ( $prop['ref_content_id'] == null ) {                $insertContent = trim(sprintf('INSERT INTO ss_web_sync.cms_content (name, code,created_by,created_at,updated_by,updated_at,name_meny,name_one,content_type) VALUES (%s, "%s", %d,%d,%d,%d,"%s","%s","%s") ON DUPLICATE KEY UPDATE updated_at=VALUES(updated_at),                code=VALUES(code);', $this->db->quoteValue($prop['name']), $prop['code'], $this->user->id, time(), $this->user->id,time(), 'Элементы', 'Элемент','info'));                if ( !$this->db->createCommand($insertContent)->execute() ) {                    $this->stdout('Query: '.$insertContent."\n", Console::FG_GREY);                    throw new \yii\db\Exception($insertContent);                }                $contentId = $this->db->getLastInsertID();            } else {                $contentId = $prop['ref_content_id'];            }            $_componentSettings = unserialize($this->componentSettings);            $_componentSettings['content_id'] = $contentId;            $_componentSettings['property']['name'] = $prop['name'];            $_componentSettings['property']['code'] = $prop['code'];            $_componentSettings['property']['content_id'] = $contentId;            /** Завести content element */            try {                $transaction = $this->db->beginTransaction();                $insertContentProp = trim(sprintf("INSERT INTO ss_web_sync.cms_content_property (                            created_by,                            updated_by,                            created_at,                            updated_at,                            content_id,                            name,                            code,                            property_type,                            list_type,                            multiple,                            multiple_cnt,                            component,                            component_settings,                            active,                            vendor_id,                            priority                          ) VALUES (                            %d,                            %d,                            %d,                            %d,                            %d,                            %s,                            \"%s\",                            \"%s\",                            \"%s\",                            \"%s\",                            %d,                            \"%s\",                            %s,                            \"%s\",                            %d,                            %d                          )",                    $this->user->getId(),                    $this->user->getId(),                    $prop['created_at'],                    $prop['updated_at'],                    $prop['content_id'],                    $this->db->quoteValue($prop['name']),                    $prop['code'],                    $prop['property_type'],                    'L',                    $prop['multiple'],                    $prop['multiple_cnt'],                    $component,                    $this->db->quoteValue(serialize($_componentSettings)),                    $prop['active'],                    $prop['id'],                    $prop['priority']                ));                if ( $this->db->createCommand($insertContentProp)->execute() )                    $this->stdout(" -> Ok\n", Console::FG_GREEN);                $transaction->commit();                ++$processed;            } catch (\Exception $e) {                $this->stdout("\tCant create ContentProperty {$e}\n", Console::FG_RED);                $transaction->rollback();                continue;            }        }        $this->stdout("\n\nDone in ".(time()-$startTime)."s. Affected {$affected} of {$total} items. Processed: {$processed}\n\n", Console::FG_GREEN);        return true;    }    protected function createReferencePropertiesValues()    {        $startTime = time();        $this->stdout("Create Reference Props values (content elements)\n", Console::FG_CYAN);        try {            $this->fixTableCollation('ss_web_sync.cms_content');        } catch (\yii\db\Exception $e) {            $this->stdout("Can't change collation for table ss_web_sync.cms_content\n{$e}", Console::FG_RED);            return;        }        $sql = "            insert into ss_web_sync.cms_content_element (bitrix_id,created_by, created_at, updated_by, updated_at,name,code,content_id,meta_title)            select            p.id as bitrix_id,            ".$this->user->id.",            ".time().",            ".$this->user->id.",            ".time().",            p.value as name,            TRIM(LEADING 'PRICE_' FROM p.xml_id) as code,            cc.id as content_id,            '' as meta_title            from front2.b_iblock_property_enum p            left join front2.b_iblock_property ip ON ip.id=p.property_id            left join ss_web_sync.cms_content cc ON cc.code=ip.code and cc.content_type='info'            left join ss_web_sync.cms_content_element cce ON cce.bitrix_id=p.property_id AND cce.content_id=cc.id            left join ss_web_sync.cms_content_property ccp ON ccp.vendor_id=p.property_id            where cc.id is not null             ON DUPLICATE KEY UPDATE updated_at=VALUES(updated_at),                code=VALUES(code),                bitrix_id=VALUES(bitrix_id)            ";        $this->stdout("Syncing prop values", Console::FG_YELLOW);        $affected = $this->db->createCommand($sql)->execute();        $this->stdout(" done. Affected {$affected} rows\n", Console::FG_GREEN);        $this->stdout("\n\nDone in ".(time()-$startTime)."sec\n\n", Console::FG_GREEN);        return true;    }    protected function createColorReferenceValues()    {        return false;        $startTime = time();        $this->stdout("Create COLOR_REF Props values (content elements)\n", Console::FG_CYAN);        try {            $this->fixTableCollation('ss_web_sync.cms_content');        } catch (\yii\db\Exception $e) {            $this->stdout("Can't change collation for table ss_web_sync.cms_content\n{$e}", Console::FG_RED);            return;        }        $sql = "            insert into ss_web_sync.cms_content_element (bitrix_id,created_by, created_at, updated_by, updated_at,name,code,content_id,meta_title)            select            pe.id as bitrix_id,            ".$this->user->id.",            ".time().",            ".$this->user->id.",            ".time().",            pe.UF_XML_ID as code,            pe.UF_NAME as name,            cc.id as content_id,            '' as meta_title            from front2.highload_color_reference pe            left join ss_web_sync.cms_content cc ON cc.code='COLOR_REF' and cc.content_type='info'            left join ss_web_sync.cms_content_element cce ON cce.bitrix_id=pe.id AND cce.content_id=cc.id            left join ss_web_sync.cms_content_property ccp ON ccp.vendor_id=pe.id            where cc.id is not null             ON DUPLICATE KEY UPDATE updated_at=VALUES(updated_at),                code=VALUES(code),                bitrix_id=VALUES(bitrix_id)            ";        $this->stdout("Syncing COLOR_REF prop values", Console::FG_YELLOW);        $affected = $this->db->createCommand($sql)->execute();        $this->stdout(" done. Affected {$affected} rows\n", Console::FG_GREEN);        /** @var CmsContent $colorRef */        $colorRef = CmsContent::find()            ->andWhere('code=:code', [ ':code' => 'COLOR_REF'] )            ->one();        $test = 0;        foreach ( $colorRef->cmsContentElements as $element )        {            $fileName = $this->db->createCommand('select                        f.SUBDIR as subdir,                        f.FILE_NAME as file_name                        from front2.highload_color_reference pe                        left join front2.b_file f on f.ID=pe.UF_FILE                        where pe.id='.$element->id)->queryOne();            if ( $fileName == false )                continue;//            $localFile = new File('/upload/iblock/'.$fileName['subdir'].'/'.$fileName['file_name']);            $localFile = 'https://shopandshow.ru/upload/uf/'.$fileName['subdir'].'/'.$fileName['file_name'];            try {                $file = \Yii::$app->storage->upload($localFile, [                    'name' => $element->name,                ]);                $element->link('image', $file);                print_r($file->attributes);            } catch (\Exception $e) {                $message = 'Not upload image to: ' . $element->id . " ()";                var_dump($message);                var_dump($e->getMessage());            }        }        $this->stdout("\n\nDone in ".(time()-$startTime)."sec\n\n", Console::FG_GREEN);        return true;    }    protected function syncColorSearch()    {        $startTime = time();        $this->stdout("Sync COLOR_SEARCH property\n", Console::FG_CYAN);        try {            $this->fixTableCollation('ss_web_sync.cms_content');        } catch (\yii\db\Exception $e) {            $this->stdout("Can't change collation for table ss_web_sync.cms_content\n", Console::FG_RED);            return;        }        /** @var CmsContent $colorSearchRef */        $colorSearchRef = CmsContent::find()            ->andWhere('code = :code', [':code' => 'COLOR_SEARCH'])            ->one();        if ( $colorSearchRef == null ) {            $this->stdout("Create Reference COLOR_SEARCH (cms_content) first\n",Console::FG_RED);            return false;        }        $sql = trim(sprintf("INSERT INTO ss_web_sync.cms_content_property (created_by, updated_by, created_at, updated_at, content_id, name, code, property_type, list_type, multiple, component, active)                              VALUES ( %d, %d, %d, %d, %d, \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\") ON DUPLICATE KEY UPDATE                                updated_at=VALUES(updated_at),                                code=VALUES(code),                                name=VALUES(name)              ",    $this->user->id, $this->user->id, time(), time(), 118, 'CSS_STYLE', 'CSS_STYLE', 'S', 'L', Cms::BOOL_N, 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeString', Cms::BOOL_Y));        $this->stdout("Syncing color search prop", Console::FG_YELLOW);        $affected = $this->db->createCommand($sql)->execute();        $this->stdout(" done. Affected {$affected} rows\n", Console::FG_GREEN);        $this->stdout("\n\nDone in ".(time()-$startTime)."sec\n\n", Console::FG_GREEN);        $colorSearchRefRelationProperty = CmsContentProperty::find()            ->andWhere(' code = :code ', [ ':code' => 'CSS_STYLE' ])            ->one();        $colorSearchRefElements = CmsContentElement::find()            ->andWhere('content_id = :content_id', [ ':content_id' => $colorSearchRef->id ])            ->all();        $affected = $processed = 0;        $total = count($colorSearchRefElements);        foreach ( $colorSearchRefElements as $element ) {            ++$affected;            $this->stdout("\n[{$affected} of {$total}] >> ", Console::FG_GREEN);            $this->stdout("Color: {$element->id}", Console::FG_YELLOW);            if ( ! array_key_exists($element->bitrix_id, $this->colorSearchPropertyCssStyles ) )                continue;            $insertProp = trim(sprintf("INSERT INTO ss_web_sync.cms_content_element_property (                            created_at,                            created_by,                            updated_at,                            updated_by,                            element_id,                            property_id,                            value                          ) VALUES (                            UNIX_TIMESTAMP(),                            %d,                            UNIX_TIMESTAMP(),                            %d,                            %d,                            %d,                            \"%s\"                          )",                $this->user->id,                $this->user->id,                $element->id,                $colorSearchRefRelationProperty->id,                $this->db->quoteValue($this->colorSearchPropertyCssStyles[$element->bitrix_id])            ));            try {                $transaction = $this->db->beginTransaction();                if ( $this->db->createCommand($insertProp)->execute() )                    $this->stdout(" -> Ok\n", Console::FG_GREEN);                $transaction->commit();                ++$processed;            } catch (\Exception $e) {                $this->stdout("\tCant set CSS_STYLE {$e}\n", Console::FG_RED);                $transaction->rollback();                return false;            }        }        $this->stdout("\n\nDone in ".(time()-$startTime)."s. Affected {$affected} of {$total} items. Processed: {$processed}\n\n", Console::FG_GREEN);        return true;    }    public function actionNewItems()    {        $this->actionCreateProducts();        $this->actionCreateOffers();    }    public function actionSyncPrices(){        $this->itemPrices();        $this->activePriceType();        $this->pricesIndex();    }    public function actionSyncProperties(){        $this->textProperties();        $this->integerProperties();        $this->elementProperties();    }    public function actionCreateProducts()    {        $startTime = time();        $this->stdout("Sync products\n", Console::FG_CYAN);        $query = "select b.*, bp.value as priority from front2.b_iblock_element b                  LEFT JOIN front2.b_iblock_element_property bp ON bp.IBLOCK_ELEMENT_ID=b.ID AND bp.IBLOCK_PROPERTY_ID=419                  where                      b.iblock_id=10                      and b.iblock_section_id IS NOT NULL                      and b.id not in (select e.bitrix_id from ss_web_sync.cms_content_element e where e.content_id=2)                  order by b.id desc                  ";        $bitrixBroducts = $this->db->createCommand($query)->queryAll();        if ( !$bitrixBroducts || count($bitrixBroducts) < 1 ) {            $this->stdout("No new products at replica\n\n");            // Yii::$app->end();        }        $this->stdout("Got new Products: ".count($bitrixBroducts)."\n\n", Console::FG_GREEN);        $affected = $processed = 0;        $total = count($bitrixBroducts);        foreach ( $bitrixBroducts as $product )        {            ++$affected;            $this->stdout("\n[{$affected} of {$total}] >> ", Console::FG_GREEN);            $this->stdout("ContentElement: {$product['ID']} - {$product['NAME']}", Console::FG_YELLOW);//            if ( $product['IBLOCK_SECTION_ID'] === null || (int) $product['IBLOCK_SECTION_ID'] === 0 ){//                $this->stdout("\tProduct must have category. Got null - skipping product\n", Console::FG_RED);//                continue;//            }////            $category = $this->getCategory($product['IBLOCK_SECTION_ID']);////            if ( $category === null ) {//                $this->stdout("\tMissing category {$product['IBLOCK_SECTION_ID']} - skipping product\n", Console::FG_RED);//                continue;//            }//            $this->stdout("\tProduct category: {$product['IBLOCK_SECTION_ID']} -> {$category->id} {$category->name}\n", Console::FG_YELLOW);            /** Завести content element */            try {                $transaction = $this->db->beginTransaction();                $insertContentElement = trim(sprintf("INSERT INTO ss_web_sync.cms_content_element (                            created_at,                            updated_at,                            content_id,                            name,                            active,                            bitrix_id,                            priority                          ) VALUES (                            %d,                            %d,                            %d,                            \"%s\",                            \"%s\",                            %d,                            %d                          )",                            strtotime($product['DATE_CREATE']),                            strtotime($product['TIMESTAMP_X']),                            self::SITE_PRODUCTS_CONTENT_ID,                            $this->getCleanName($product['NAME']),                            $product['ACTIVE'],                            $product['ID'],                            $product['priority']                          ));                if ( $this->db->createCommand($insertContentElement)->execute() )                    $this->stdout(" -> Ok\n", Console::FG_GREEN);                $productId = $this->db->getLastInsertID();                $this->stdout("ShopProduct {$productId}", Console::FG_YELLOW);                $insertShopProduct = trim(sprintf("INSERT INTO ss_web_sync.shop_product (                          id,                          created_at,                          updated_at,                          quantity                        ) VALUES (                          %d,                          %d,                          %d,                          %d                        )",                        $productId,                        strtotime($product['DATE_CREATE']),                        strtotime($product['TIMESTAMP_X']),                        1));                if ( $this->db->createCommand($insertShopProduct)->execute() )                    $this->stdout(" -> Ok\n", Console::FG_GREEN);                $transaction->commit();                ++$processed;            } catch (\Exception $e) {                $this->stdout("\tCant create ContentElement {$e}\n", Console::FG_RED);                $transaction->rollback();                continue;            }        }        $this->stdout("\n\nDone in ".(time()-$startTime)."s. Affected {$affected} of {$total} items. Processed: {$processed}\n\n", Console::FG_GREEN);        return;    }    public function actionCreateOffers()    {        $startTime = time();        $this->stdout("Sync offers\n", Console::FG_CYAN);        $query = "                  select b.*, ce.id as parent_id, bp.value as priority from front2.b_iblock_element b                  LEFT JOIN front2.b_iblock_element_property bp ON bp.IBLOCK_ELEMENT_ID=b.ID AND bp.IBLOCK_PROPERTY_ID=419                  LEFT JOIN front2.b_iblock_element_property bep ON bep.IBLOCK_ELEMENT_ID=b.ID AND bep.IBLOCK_PROPERTY_ID=58                  LEFT JOIN ss_web_sync.cms_content_element ce ON ce.bitrix_id=bep.VALUE                  where                      b.iblock_id=11                      and ce.id is not null                      and b.id not in (select e.bitrix_id from ss_web_sync.cms_content_element e where e.content_id=10)                  order by b.id desc                  ";        $bitrixBroducts = $this->db->createCommand($query)->queryAll();        if ( !$bitrixBroducts || count($bitrixBroducts) < 1 ) {            $this->stdout("No new products at replica\n\n");            // Yii::$app->end();        }        $this->stdout("Got new Offers: ".count($bitrixBroducts)."\n\n", Console::FG_GREEN);        $affected = $processed = 0;        $total = count($bitrixBroducts);        foreach ( $bitrixBroducts as $product )        {            ++$affected;            $this->stdout("\n[{$affected} of {$total}] >> ", Console::FG_GREEN);            $this->stdout("ContentElement: {$product['ID']} - {$product['NAME']}", Console::FG_YELLOW);            /** Завести content element */            try {                $transaction = $this->db->beginTransaction();                $insertContentElement = trim(sprintf("INSERT INTO ss_web_sync.cms_content_element (                            created_at,                            updated_at,                            content_id,                            name,                            active,                            bitrix_id,                            priority,                            parent_content_element_id                          ) VALUES (                            %d,                            %d,                            %d,                            '%s',                            '%s',                            %d,                            %d,                            %d                          )",                            strtotime($product['DATE_CREATE']),                            strtotime($product['TIMESTAMP_X']),                            self::SITE_SALE_ITEMS_CONTENT_ID,                            $this->getCleanName($product['NAME']),                            $product['ACTIVE'],                            $product['ID'],                            $product['priority'],                            $product['parent_id']                ));                if ( $this->db->createCommand($insertContentElement)->execute() )                    $this->stdout(" -> Ok\n", Console::FG_GREEN);                $productId = $this->db->getLastInsertID();                $this->stdout("ShopProduct {$productId}", Console::FG_YELLOW);                $insertShopProduct = trim(sprintf("INSERT INTO ss_web_sync.shop_product (                          id,                          created_at,                          updated_at,                          quantity,                          product_type                        ) VALUES (                          %d,                          %d,                          %d,                          %d,                          \"offers\"                        )",                    $productId,                        strtotime($product['DATE_CREATE']),                        strtotime($product['TIMESTAMP_X']),                        1));                if ( $this->db->createCommand($insertShopProduct)->execute() )                    $this->stdout(" -> Ok\n", Console::FG_GREEN);                $transaction->commit();                ++$processed;            } catch (\Exception $e) {                $this->stdout("\tCant create ContentElement {$e}\n", Console::FG_RED);                $transaction->rollback();                continue;            }        }        $this->stdout("\n\nDone in ".(time()-$startTime)."s. Affected {$affected} of {$total} items. Processed: {$processed}\n\n", Console::FG_GREEN);        return;    }    public function actionSyncPhotos()    {//        return false;        $startTime = time();        $this->stdout("Create Product/Offer photos\n", Console::FG_CYAN);        /** @var CmsContent $colorRef */        $colorRef = CmsContent::find()            ->orWhere('code = :code', [ ':code' => 'product' ])            ->orWhere('code = :code', [ ':code' => 'productChild' ] )            ->all();        foreach ($colorRef as $c)            print_r($c->attributes);        return false;        Yii::$app->end();        $test = 0;        foreach ( $colorRef->cmsContentElements as $element )        {            $fileName = $this->db->createCommand('select                        f.SUBDIR as subdir,                        f.FILE_NAME as file_name                        from front2.highload_color_reference pe                        left join front2.b_file f on f.ID=pe.UF_FILE                        where pe.id='.$element->id)->queryOne();            if ( $fileName == false )                continue;//            $localFile = new File('/upload/iblock/'.$fileName['subdir'].'/'.$fileName['file_name']);            $localFile = 'https://shopandshow.ru/upload/uf/'.$fileName['subdir'].'/'.$fileName['file_name'];            try {                $file = \Yii::$app->storage->upload($localFile, [                    'name' => $element->name,                ]);                $element->link('image', $file);                print_r($file->attributes);            } catch (\Exception $e) {                $message = 'Not upload image to: ' . $element->id . " ()";                var_dump($message);                var_dump($e->getMessage());            }        }        $this->stdout("\n\nDone in ".(time()-$startTime)."sec\n\n", Console::FG_GREEN);        return true;    }    protected function itemPrices()    {        $startTime = time();        /** В тупую вставить цены из Битрикса, минуя историю изменения цен */        $query = "                SELECT                    sp.id as product_id,                    CASE                        WHEN price_base.VALUE IS NOT NULL THEN price_base.VALUE                        ELSE parent_price_base.VALUE                    END AS BASE,                    CASE                        WHEN price_base.VALUE IS NOT NULL THEN price_base.VALUE                        ELSE parent_price_base.VALUE                    END AS SHOPANDSHOW,                    CASE                        WHEN price_sale.VALUE IS NOT NULL THEN price_sale.VALUE                        ELSE parent_price_sale.VALUE                    END AS SALE,                    CASE                        WHEN price_today.VALUE IS NOT NULL THEN price_today.VALUE                        ELSE parent_price_base.VALUE                    END AS TODAY,                    CASE                        WHEN price_discounted.VALUE IS NOT NULL THEN price_discounted.VALUE                        ELSE parent_price_discounted.VALUE                    END AS DISCOUNTED                FROM front2.b_iblock_element b                LEFT JOIN front2.b_iblock_element_property bep ON bep.IBLOCK_ELEMENT_ID=b.ID AND bep.IBLOCK_PROPERTY_ID=58                LEFT JOIN front2.b_iblock_element_property parent_price_base ON parent_price_base.IBLOCK_ELEMENT_ID=bep.VALUE AND parent_price_base.IBLOCK_PROPERTY_ID=70                LEFT JOIN front2.b_iblock_element_property parent_price_sale ON parent_price_sale.IBLOCK_ELEMENT_ID=bep.VALUE AND parent_price_sale.IBLOCK_PROPERTY_ID=174                LEFT JOIN front2.b_iblock_element_property parent_price_today ON parent_price_today.IBLOCK_ELEMENT_ID=bep.VALUE AND parent_price_today.IBLOCK_PROPERTY_ID=73                LEFT JOIN front2.b_iblock_element_property parent_price_discounted ON parent_price_discounted.IBLOCK_ELEMENT_ID=bep.VALUE AND parent_price_discounted.IBLOCK_PROPERTY_ID=71                LEFT JOIN front2.b_iblock_element_property price_base ON price_base.IBLOCK_ELEMENT_ID=b.ID AND price_base.IBLOCK_PROPERTY_ID=70                LEFT JOIN front2.b_iblock_element_property price_sale ON price_sale.IBLOCK_ELEMENT_ID=b.ID AND price_sale.IBLOCK_PROPERTY_ID=174                LEFT JOIN front2.b_iblock_element_property price_today ON price_today.IBLOCK_ELEMENT_ID=b.ID AND price_today.IBLOCK_PROPERTY_ID=73                LEFT JOIN front2.b_iblock_element_property price_discounted ON price_discounted.IBLOCK_ELEMENT_ID=b.ID AND price_discounted.IBLOCK_PROPERTY_ID=71                LEFT JOIN front2.b_iblock_element_property bp ON bp.IBLOCK_ELEMENT_ID=b.ID AND bp.IBLOCK_PROPERTY_ID=419                LEFT JOIN ss_web_sync.cms_content_element ce ON ce.bitrix_id = b.id                LEFT JOIN ss_web_sync.shop_product sp ON sp.id=ce.id                  WHERE b.id in (select bitrix_id from ss_web_sync.cms_content_element e where e.content_id in (2,10))        ";        $bitrixPrices = $this->db->createCommand($query)->queryAll();        if ( !$bitrixPrices || count($bitrixPrices) < 1 ) {            $this->stdout("No prices\n\n");            // Yii::$app->end();        }        $this->stdout("Got ".count($bitrixPrices)." to insert\n", Console::FG_GREEN);        $affected = $processed = 0;        $total = count($bitrixPrices);        $priceTypes = $this->getPriceTypes();        if ( count($priceTypes) < 1 ) {            $this->stdout("No prices types configured!\n", Console::FG_RED);            return;        }        foreach ( $bitrixPrices as $price ) {            ++$affected;            $this->stdout("\n[{$affected} of {$total}] >> ", Console::FG_GREEN);            $this->stdout("Product/Offer: {$price['product_id']} \n\tBASE\t\t{$price['BASE']}\n\tSHOPANDSHOW\t{$price['SHOPANDSHOW']}\n\tTODAY\t\t{$price['TODAY']}\n\tSALE\t\t{$price['SALE']}\n\tDISCOUNTED\t{$price['DISCOUNTED']}\t", Console::FG_YELLOW);            $insertPrices = "INSERT INTO ss_web_sync.shop_product_price (created_at, updated_at, product_id, type_price_id, price, currency_code) VALUES ";            foreach ( $priceTypes as $code => $type ) {                if ( ! array_key_exists($code, $price) )                    continue;                $insertPrices .= sprintf(                    "(UNIX_TIMESTAMP(),UNIX_TIMESTAMP(), %d, %d, %d, 'RUB')",                    $price['product_id'],                    $type->id,                    filter_var($price[$code], FILTER_SANITIZE_NUMBER_INT)                );                if ( end($priceTypes) !== $type )                    $insertPrices .= ",";            }            $insertPrices .= "ON DUPLICATE KEY UPDATE                            updated_at=VALUES(updated_at),                            price=VALUES(price)";            try {                $transaction = $this->db->beginTransaction();                if ( $this->db->createCommand($insertPrices)->execute() )                    $this->stdout(" -> Ok\n", Console::FG_GREEN);                $transaction->commit();                ++$processed;            } catch (\Exception $e) {                $this->stdout("\tCant set prices {$e}\n", Console::FG_RED);                $transaction->rollback();                continue;            }        }        $this->stdout("\n\nDone in ".(time()-$startTime)."s. Affected {$affected} of {$total} items. Processed: {$processed}\n\n", Console::FG_GREEN);        return;    }    protected function activePriceType()    {        $startTime = time();        $this->stdout("Update product/offer active price type\n", Console::FG_CYAN);        /** Обновление Активной цены */        $query = "                SELECT                    sp.id as element_id,                    ccp.id as property_id,                    CASE                        WHEN ccpv.id IS NOT NULL THEN ccpv.id ELSE                        CASE WHEN ccpv.id IS NULL AND parent_ccpv.id IS NOT NULL THEN parent_ccpv.id                        ELSE NULL                    END END AS value                                    FROM front2.b_iblock_element b                LEFT JOIN front2.b_iblock_element_property bep ON bep.IBLOCK_ELEMENT_ID=b.ID AND bep.IBLOCK_PROPERTY_ID=58                LEFT JOIN front2.b_iblock_element_property parent_price_active ON parent_price_active.IBLOCK_ELEMENT_ID=bep.VALUE AND parent_price_active.IBLOCK_PROPERTY_ID=88                LEFT JOIN front2.b_iblock_element_property price_active ON price_active.IBLOCK_ELEMENT_ID=b.ID AND price_active.IBLOCK_PROPERTY_ID=88                LEFT JOIN front2.b_iblock_element_property bp ON bp.IBLOCK_ELEMENT_ID=b.ID AND bp.IBLOCK_PROPERTY_ID=419                                LEFT JOIN front2.b_iblock_property_enum ppa ON ppa.ID=parent_price_active.VALUE                LEFT JOIN front2.b_iblock_property_enum pa ON pa.ID=price_active.VALUE                                LEFT JOIN ss_web_sync.cms_content_property ccp ON ccp.vendor_id=88                                LEFT JOIN ss_web_sync.cms_content_property ccpc ON ccpc.code='PRICE_CODE'                LEFT JOIN ss_web_sync.cms_content_element parent_ccpv ON parent_ccpv.content_id=ccpc.content_id AND parent_ccpv.code=ppa.ID                LEFT JOIN ss_web_sync.cms_content_element ccpv ON ccpv.content_id=ccpc.content_id AND ccpv.code=pa.ID                LEFT JOIN ss_web_sync.cms_content_element ce ON ce.bitrix_id = b.id                LEFT JOIN ss_web_sync.shop_product sp ON sp.id=ce.id                  WHERE b.id in (select bitrix_id from ss_web_sync.cms_content_element e where e.content_id in (2,10))                HAVING value IS NOT NULL        ";        $bitrixPrices = $this->db->createCommand($query)->queryAll();        if ( !$bitrixPrices || count($bitrixPrices) < 1 ) {            $this->stdout("No prices\n\n");            // Yii::$app->end();        }        $this->stdout("Got ".count($bitrixPrices)." to insert\n", Console::FG_GREEN);        $affected = $processed = 0;        $total = count($bitrixPrices);        $transactionDelete = $this->db->beginTransaction();        /** Todo: Подумать надо ли хранить историю изменений */        $this->stdout("Delete all entries (PROPERTY_ID={$bitrixPrices[0]['property_id']})", Console::FG_YELLOW);        $affected = $this->db->createCommand("DELETE FROM ss_web_sync.cms_content_element_property WHERE property_id={$bitrixPrices[0]['property_id']};")->execute();        $this->stdout(" done. Affected ".(int) $affected."\n", Console::FG_GREEN);        foreach ( $bitrixPrices as $price ) {            ++$affected;            $this->stdout("\n[{$affected} of {$total}] >> ", Console::FG_GREEN);            $this->stdout("Product/Offer: {$price['element_id']} active price type {$price['value']}", Console::FG_YELLOW);            $insertActivePrice = trim(sprintf("INSERT INTO ss_web_sync.cms_content_element_property (                            created_at,                            updated_at,                            element_id,                            property_id,                            value,                            value_enum,                            value_num                          ) VALUES (                            UNIX_TIMESTAMP(),                            UNIX_TIMESTAMP(),                            %d,                            %d,                            '%s',                            %d,                            %d                          )",                $price['element_id'],                $price['property_id'],                (string) $price['value'],                $price['value'],                $price['value']            ));            try {                $transaction = $this->db->beginTransaction();                if ( $this->db->createCommand($insertActivePrice)->execute() )                    $this->stdout(" -> Ok\n", Console::FG_GREEN);                $transaction->commit();                ++$processed;            } catch (\Exception $e) {                $this->stdout("\tCant set prices {$e}\n", Console::FG_RED);                $transaction->rollback();                $transactionDelete->rollBack();                return false;            }        }        $transactionDelete->commit();        $this->stdout("\n\nDone in ".(time()-$startTime)."s. Affected {$affected} of {$total} items. Processed: {$processed}\n\n", Console::FG_GREEN);        return;    }    protected function pricesIndex()    {        $startTime = time();        $this->stdout("Rebuilding aggregated prices table (ss_shop_product_prices)\n", Console::FG_CYAN);        $this->db->createCommand("SET sql_mode = '';")->execute();        $this->db->createCommand("SET @base_price_id = (SELECT id FROM `shop_type_price` WHERE `def` = 'Y');")->execute();        $this->stdout("Delete all entries ", Console::FG_YELLOW);        $affected = $this->db->createCommand("DELETE FROM ss_web_sync.ss_shop_product_prices WHERE 1=1;")->execute();        $this->stdout(" done. Affected ".(int) $affected."\n", Console::FG_GREEN);        $insertSql = <<<SQLINSERT INTO ss_shop_product_prices (product_id, type_price_id, price, min_price, max_price, discount_percent)SELECT t.*, ROUND(((price - min_price) / price) * 100 ) AS discount_percentFROM ( SELECT product.id AS product_id, COALESCE(stp_offer.id, @base_price_id) AS type_price_id, COALESCE(sp_offer.price, sp_base.price) AS price,    COALESCE(NULLIF(MIN(COALESCE(sp_min_max_offer.price, sp_min_max_product.price)), ''), COALESCE(sp_offer.price, sp_base.price)) AS min_price,     MAX(COALESCE(sp_min_max_offer.price, sp_min_max_product.price)) AS max_price          FROM cms_content_element AS product            LEFT JOIN cms_content_element parent_products ON parent_products.parent_content_element_id = product.id        LEFT JOIN cms_content_element_property price_active_id ON price_active_id.element_id = COALESCE(product.parent_content_element_id, product.id)       AND price_active_id.property_id = (SELECT id FROM cms_content_property WHERE code = 'PRICE_ACTIVE' AND content_id = 2)        LEFT JOIN cms_content_element_property price_active_type ON  price_active_type.element_id = price_active_id.value         AND price_active_type.property_id = (SELECT id FROM cms_content_property WHERE code = 'PRICE_CODE')        LEFT JOIN shop_type_price AS stp_offer ON stp_offer.code = price_active_type.value    LEFT JOIN shop_product_price AS sp_offer ON sp_offer.product_id = parent_products.id AND (sp_offer.type_price_id = stp_offer.id OR sp_offer.type_price_id = @base_price_id)     LEFT JOIN shop_product_price AS sp_base ON sp_base.type_price_id = @base_price_id AND sp_base.product_id = product.id        LEFT JOIN shop_product_price AS sp_min_max_offer ON sp_min_max_offer.product_id IN (parent_products.id)    LEFT JOIN shop_product_price AS sp_min_max_product ON sp_min_max_product.product_id = product.id        WHERE product.content_id IN (2, 10)        GROUP BY product.id) AS tSQL;        $this->stdout("Inserting prices ", Console::FG_GREEN);        if ( $affected = $this->db->createCommand($insertSql)->execute() )            $this->stdout(" done. Affected ".$affected."\n", Console::FG_GREEN);        $this->stdout("\n\nDone in ".(time() - $startTime)." \n\n", Console::FG_GREEN);        return;    }    protected function integerProperties()    {        $startTime = time();        $this->stdout("Reload Product/Offer properties - PropertyTypeNumber and PropertyTypeList, not multiple\n", Console::FG_CYAN);        $this->db->createCommand("SET sql_mode = '';")->execute();        $deleteTransaction = $this->db->beginTransaction();        $this->stdout("Delete all properties ", Console::FG_YELLOW);        $affected = $this->db->createCommand("DELETE FROM ss_web_sync.cms_content_element_property WHERE property_id in (select id from ss_web_sync.cms_content_property where multiple='N' and (component like '%PropertyTypeNumber' or component like '%PropertyTypeList') and content_id in (2,10));")->execute();        $this->stdout(" done. Affected ".(int) $affected."\n", Console::FG_GREEN);        $insertSql = <<<SQL          INSERT INTO ss_web_sync.cms_content_element_property (created_at, updated_at, property_id, element_id, value, value_enum, value_num)            SELECT            UNIX_TIMESTAMP() as created_at,            UNIX_TIMESTAMP() as updated_at,            cp.id,            ce.id as element_id,            bep.VALUE,            CASE WHEN cp.component like '%PropertyTypeList' THEN bep.VALUE_ENUM ELSE bep.VALUE_NUM END as value_enum,            CASE WHEN cp.component like '%PropertyTypeNumber' THEN bep.VALUE_NUM ELSE bep.VALUE_ENUM END as value_num                            FROM front2.b_iblock_element b                            LEFT JOIN front2.b_iblock_property bp ON bp.IBLOCK_ID=b.IBLOCK_ID                            LEFT JOIN front2.b_iblock_element_property bep ON bep.IBLOCK_ELEMENT_ID=b.ID AND bep.IBLOCK_PROPERTY_ID=bp.ID                            LEFT JOIN ss_web_sync.cms_content_property cp ON cp.vendor_id = bp.id                            LEFT JOIN ss_web_sync.cms_content_element ce ON ce.bitrix_id = b.id                            LEFT JOIN ss_web_sync.shop_product sp ON sp.id=ce.id                              WHERE b.id in (select bitrix_id from ss_web_sync.cms_content_element e where e.content_id in (2,10))                              and cp.multiple='N'                              and (cp.component like '%PropertyTypeNumber' or cp.component like '%PropertyTypeList')                              and bep.VALUE is not nullSQL;        $this->stdout("Inserting properties ", Console::FG_YELLOW);        try {            $insertTransaction = $this->db->beginTransaction();            $affected = $this->db->createCommand($insertSql)->execute();            $this->stdout(" done. Affected " . $affected . "\n", Console::FG_GREEN);            $insertTransaction->commit();            $deleteTransaction->commit();        } catch (\yii\db\Exception $e) {            $this->stdout(" Error.\n{$e}\n", Console::FG_RED);            $insertTransaction->rollBack();            $deleteTransaction->rollBack();            return;        }        $this->stdout("\n\nDone in ".(time() - $startTime)."s \n\n", Console::FG_GREEN);        return;    }    protected function elementProperties()    {        $startTime = time();        $this->stdout("Reload Product/Offer properties - PropertyTypeElement, not multiple\n", Console::FG_CYAN);        $this->db->createCommand("SET sql_mode = '';")->execute();        $deleteTransaction = $this->db->beginTransaction();        $this->stdout("Delete all properties ", Console::FG_YELLOW);        $affected = $this->db->createCommand("DELETE FROM ss_web_sync.cms_content_element_property WHERE property_id in (select id from ss_web_sync.cms_content_property where multiple='N' and component like '%PropertyTypeElement' and content_id in (2,10));")->execute();        $this->stdout(" done. Affected ".(int) $affected."\n", Console::FG_GREEN);        $insertSql = <<<SQL          INSERT INTO ss_web_sync.cms_content_element_property (created_at, updated_at, property_id, element_id, value, value_enum, value_num)            SELECT            UNIX_TIMESTAMP() as created_at,            UNIX_TIMESTAMP() as updated_at,            cp.id,            ce.id as element_id,            CASE WHEN c.code='COLOR_REF' THEN ev_c.id ELSE ev.id END as VALUE,            CASE WHEN c.code='COLOR_REF' THEN ev_c.id ELSE ev.id END as VALUE_NUM,            CASE WHEN c.code='COLOR_REF' THEN ev_c.id ELSE ev.id END as VALUE_ENUM                            FROM front2.b_iblock_element b                            LEFT JOIN front2.b_iblock_property bp ON bp.IBLOCK_ID=b.IBLOCK_ID                            LEFT JOIN front2.b_iblock_element_property bep ON bep.IBLOCK_ELEMENT_ID=b.ID AND bep.IBLOCK_PROPERTY_ID=bp.ID                            LEFT JOIN ss_web_sync.cms_content_property cp ON cp.vendor_id = bp.id                            LEFT JOIN ss_web_sync.cms_content c ON c.code=cp.code                            LEFT JOIN ss_web_sync.cms_content_element ev ON ev.bitrix_id=bep.VALUE AND ev.content_id=c.id                            LEFT JOIN ss_web_sync.cms_content_element ev_c ON ev_c.code=bep.VALUE AND ev_c.content_id=c.id AND c.code='COLOR_REF'                                                    LEFT JOIN ss_web_sync.cms_content_element ce ON ce.bitrix_id = b.id                            LEFT JOIN ss_web_sync.shop_product sp ON sp.id=ce.id                              WHERE b.id in (select bitrix_id from ss_web_sync.cms_content_element e where e.content_id in (2,10))                              and cp.multiple='N'                              and cp.component like '%PropertyTypeElement'                              and bep.VALUE is not null                              and bp.ID in (select e.vendor_id from ss_web_sync.cms_content_property e where e.content_id in (2,10))SQL;        $this->stdout("Inserting properties ", Console::FG_YELLOW);        try {            $insertTransaction = $this->db->beginTransaction();            $affected = $this->db->createCommand($insertSql)->execute();            $this->stdout(" done. Affected " . $affected . "\n", Console::FG_GREEN);            $insertTransaction->commit();            $deleteTransaction->commit();        } catch (\yii\db\Exception $e) {            $this->stdout(" Error.\n{$e}\n", Console::FG_RED);            $insertTransaction->rollBack();            $deleteTransaction->rollBack();            return;        }        $this->stdout("\n\nDone in ".(time() - $startTime)."s \n\n", Console::FG_GREEN);        return;    }    protected function textProperties()    {        $startTime = time();        $this->stdout("Reload Product/Offer properties - PropertyTypeText, not multiple\n", Console::FG_CYAN);        /** Обновление текстовых свойств цены */        $query = "                SELECT                    UNIX_TIMESTAMP() as created_at,                    UNIX_TIMESTAMP() as updated_at,                    cp.id as property_id,                    ce.id as element_id,                    bp.USER_TYPE,                    bp.USER_TYPE_SETTINGS,                    bep.VALUE                FROM front2.b_iblock_element b                LEFT JOIN front2.b_iblock_property bp ON bp.IBLOCK_ID=b.IBLOCK_ID                LEFT JOIN front2.b_iblock_element_property bep ON bep.IBLOCK_ELEMENT_ID=b.ID AND bep.IBLOCK_PROPERTY_ID=bp.ID                LEFT JOIN ss_web_sync.cms_content_property cp ON cp.vendor_id = bp.id                LEFT JOIN ss_web_sync.cms_content c ON c.code=cp.code                LEFT JOIN ss_web_sync.cms_content_element ce ON ce.bitrix_id = b.id                LEFT JOIN ss_web_sync.shop_product sp ON sp.id=ce.id                WHERE b.id in (select bitrix_id from ss_web_sync.cms_content_element e where e.content_id in (2,10))                                      and cp.multiple='N'                                      and cp.component like '%PropertyTypeText'                                      and bep.VALUE is not null                                      and bp.ID in (select e.vendor_id from ss_web_sync.cms_content_property e where e.content_id in (2,10))        ";        $bitrixProps = $this->db->createCommand($query)->queryAll();        if ( !$bitrixProps || count($bitrixProps) < 1 ) {            $this->stdout("No props\n\n");            // Yii::$app->end();        }        $this->stdout("Got ".count($bitrixProps)." to insert\n", Console::FG_GREEN);        $affected = $processed = 0;        $total = count($bitrixProps);        $transactionDelete = $this->db->beginTransaction();        /** Todo: Подумать надо ли хранить историю изменений */        $this->stdout("Delete all properties ", Console::FG_YELLOW);        $affected = $this->db->createCommand("DELETE FROM ss_web_sync.cms_content_element_property WHERE property_id in (select id from ss_web_sync.cms_content_property where multiple='N' and component like '%PropertyTypeText' and content_id in (2,10));")->execute();        $this->stdout(" done. Affected ".(int) $affected."\n", Console::FG_GREEN);        foreach ( $bitrixProps as $prop ) {            ++$affected;            $_textValue = '';            if ( $prop['USER_TYPE'] !== null && strtolower($prop['USER_TYPE']) == 'html' ) {                $_ = json_decode($prop['VALUE']);                if ( array_key_exists('TEXT', $_) )                    $_textValue = $_['TEXT'];            } elseif ( $prop['USER_TYPE'] === null ) {                $_textValue = $prop['VALUE'];            }            $this->stdout("\n[{$affected} of {$total}] >> ", Console::FG_GREEN);            $this->stdout("Product/Offer: {$prop['element_id']} property {$prop['property_id']}", Console::FG_YELLOW);            $insertProp = trim(sprintf("INSERT INTO ss_web_sync.cms_content_element_property (                            created_at,                            updated_at,                            element_id,                            property_id,                            value                          ) VALUES (                            UNIX_TIMESTAMP(),                            UNIX_TIMESTAMP(),                            %d,                            %d,                            %s                          )",                $prop['element_id'],                $prop['property_id'],                (string) $this->db->quoteValue(Html::encode(nl2br($_textValue)))            ));            try {                $transaction = $this->db->beginTransaction();                if ( $this->db->createCommand($insertProp)->execute() )                    $this->stdout(" -> Ok\n", Console::FG_GREEN);                $transaction->commit();                ++$processed;            } catch (\Exception $e) {                $this->stdout("\tCant set prices {$e}\n", Console::FG_RED);                $transaction->rollback();                $transactionDelete->rollBack();                return false;            }        }        $transactionDelete->commit();        $this->stdout("\n\nDone in ".(time()-$startTime)."s. Affected {$affected} of {$total} items. Processed: {$processed}\n\n", Console::FG_GREEN);        return;    }    /** Move to ImportHelper */    protected function getCleanName($string){        $string = preg_replace('/^\[[0-9\-]+\]/xi', '', $string);        $string = preg_replace('/\s\(\d+\)$/xi', '', $string);        $string = htmlspecialchars(trim($string));        return $string;    }    protected function fixTableCollation($table, $column = 'code', $collation = 'utf8_unicode_ci')    {        $this->stdout("\tAlter table {$table} collation to {$collation} ", Console::FG_YELLOW);        if ( $this->db->createCommand("ALTER TABLE {$table} CHARACTER SET utf8 COLLATE utf8_unicode_ci") )            $this->stdout("-> Ok\n", Console::FG_GREEN);        $field = $this->db->createCommand("SHOW FIELDS FROM {$table} where Field ='{$column}'")->queryOne();        $field['Type'] = strtoupper($field['Type']);        $field['Null'] = $field['Null'] == 'NO' ? 'NOT NULL' : '';        $this->stdout("\tAlter table {$table} change {$column} column collation to {$collation} ", Console::FG_YELLOW);                if ( $this->db->createCommand("ALTER TABLE {$table} CHANGE {$column} {$column} {$field['Type']} CHARACTER SET utf8 COLLATE utf8_unicode_ci {$field['Null']}") )                    $this->stdout("-> Ok\n", Console::FG_GREEN);    }    /**     * Общий метод обновления счетчиков     */    protected function updateCounters()    {        $this->updateCounterCCECountChildren();    }    /**     * Обновление счетчика количества потомков     * @return int     */    private function updateCounterCCECountChildren()    {                $sql =  <<<SQLUPDATE cms_content_element AS cce, (    SELECT parent_content_element_id, COUNT(*) AS cnt     FROM cms_content_element    GROUP BY parent_content_element_id) AS child   SET cce.count_children = child.cnt WHERE cce.id = child.parent_content_element_id AND cce.content_id = 2;SQL;        return $this->db->createCommand($sql)->execute();    }}