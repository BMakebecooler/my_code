<?namespace console\models\sas;use common\models\ImportStockSaleV2;use Exception;use modules\shopandshow\models\ShopContentElement;use skeeks\cms\components\Cms;use skeeks\cms\models\CmsContent;use skeeks\cms\models\CmsContentProperty;use skeeks\cms\models\CmsContentElement;use skeeks\cms\models\CmsContentElementProperty;use skeeks\cms\models\CmsContentPropertyEnum;use skeeks\cms\models\CmsTree;use skeeks\cms\shop\models\ShopProduct;use Yii;/** * @property string column0 "BITRIX_PRODUCT_ID" * @property string column1 "CATEGORY_ID" * @property string column2 "ACTIVE" * @property string column3 "NAME" * @property string column4 "SHORT_DESCRIPTION" * @property string column5 "LONG_DESCRIPTION" * @property string column6 "PREVIEW_PICTURE" * @property string column7 "DETAIL_PICTURE" * @property string column8 "CODE" * @property string column9 "XML_ID" * @property string column10 "PROPERTY_CML2_LINK" * @property string column11 "PROPERTY_SIZE" * @property string column12 "PROPERTY_COLOR" * @property string column13 "PROPERTY_GOODS_1C" * @property string column14 "PROPERTY_PRICE_BASE" * @property string column15 "PROPERTY_PRICE_BASE_1C" * @property string column16 "PROPERTY_PRICE_DISCOUNTED" * @property string column17 "PROPERTY_PRICE_DISCOUNTED_1C" * @property string column18 "PROPERTY_PRICE_TODAY" * @property string column19 "PROPERTY_PRICE_TODAY_1C" * @property string column20 "PROPERTY_COLOR_REF" * @property string column21 "PROPERTY_STOP_SALE_AT" * @property string column22 "PROPERTY_COLOR_BRASSIERE_REF" * @property string column23 "PROPERTY_COLOR_PANTS_REF" * @property string column24 "PROPERTY_SIZE_BRASSIERE" * @property string column25 "PROPERTY_SIZE_PANTS" * @property string column26 "PROPERTY_SIZE_SHOES" * @property string column27 "PROPERTY_SIZE_CLOTHES" * @property string column28 "PROPERTY_SIZE_RINGS" * @property string column29 "PROPERTY_SIZE_CLOTHES_LETTER" * @property string column30 "PROPERTY_SIZE_BED_LINEN" * @property string column31 "PROPERTY_PRICE_SALE" * @property string column32 "PROPERTY_PRICE_SALE_1C" * @property string column33 "PROPERTY_PRICE_CATALOG" * @property string column34 "PROPERTY_PRICE_CATALOG_1C" * @property string column35 "PROPERTY_LENGTH" * @property string column36 "PROPERTY_IS_FREE_DELIVERY" * @property string column37 "PROPERTY_PURCHASE_PRICE" * @property string column38 "PROPERTY_MODEL" * @property string column39 "PROPERTY_PARAMETER1" * @property string column40 "PROPERTY_PARAMETER2" * @property string column41 "PROPERTY_REST" * @property string column42 "PROPERTY_TYPE" * @property string column43 "PROPERTY_TYPE_NAME" * @property string column44 "PROPERTY_SIZE_BATTERY" * @property string column45 "PROPERTY_ONE_ITEM_SALE" * @property string column46 "PROPERTY_DIAMETR" * @property string column47 "PROPERTY_SIZE_PILLOWS" * @property string column48 "PROPERTY_SIZE_LINENS" * @property string column49 "PROPERTY_SHOES_SIZE_MODA" * @property string column50 "PROPERTY_SIZE_CLOTHING_BUFFER" * @property string column51 "PROPERTY_SIZE_CLOTHING" * @property string column52 "PROPERTY_COLOR_MODA_NEW" * @property string column53 "PROPERTY_PRICE_CATALOG_N2" * @property string column54 "PROPERTY_SIZE_WEIT" * @property string column55 "PROPERTY_LOT_AVAILABILITY" * @property string column56 "PROPERTY_COLOR_SEARCH" * * Class ProductSaleModel * @package console\models\sas */class ProductSaleModel extends ImportModel{    private $params = [];    private static $categories = [];    public function addProduct()    {        $cmsContentElement = $this->getCmsContentElementOffer();        if (!$cmsContentElement) {            return false;        }        if ($cmsContentElement) {            $this->_updateShopProduct($cmsContentElement);            /** TODO: фото в модификациях пока не используются */            //Главное изображение если еще не задано изображения//            if ($this->column7 && !$cmsContentElement->image) {//                try {//                    $realUrl = $this->column7;////                    $file = \Yii::$app->storage->upload($realUrl, [//                        'name' => $cmsContentElement->name//                    ]);//                    $cmsContentElement->link('image', $file);////                } catch (\Exception $e) {//                    $message = 'Not upload image to: ' . $cmsContentElement->id . " ({$realUrl})";//                    var_dump($message);//                    var_dump($e->getMessage());//                }//            }//            if (!$cmsContentElement->relatedPropertiesModel->save()) {//                var_dump($cmsContentElement->relatedPropertiesModel->getErrors());//                die();//            }        }        return true;    }    private function _updateShopProduct(CmsContentElement & $cmsContentElement)    {        $shopProduct = $cmsContentElement->shopProduct;        if (!$shopProduct && $cmsContentElement->id) {            $shopProduct = new \modules\shopandshow\models\ShopProduct();            $shopProduct->id = $cmsContentElement->id;            $shopProduct->save();        } else {//            var_dump('exist ShopProduct');        }        $allowPriceUpdate = true;        if ($shopProduct) {            $priceCalc = round($this->column13*1.2);            /*if ($enum = $cmsContentElement->relatedPropertiesModel->getEnumByAttribute('priceDisallow')) {                if ($enum->code == 'disallow') {                    $allowPriceUpdate = false;                }            }*/            //Есть родитель            /*if ($cmsContentElement->parentContentElement) {                if ($enum = $cmsContentElement->parentContentElement->relatedPropertiesModel->getEnumByAttribute('priceDisallow')) {                    if ($enum->code == 'disallow') {                        $allowPriceUpdate = false;                    }                }            }*/            if ($allowPriceUpdate) {                $shopProduct->baseProductPriceValue = $priceCalc;                $shopProduct->baseProductPriceCurrency = "RUB";            } else {//                var_dump('Not update price');            }//            $shopProduct->quantity = $this->column20;            $shopProduct->product_type = ShopProduct::TYPE_OFFERS;            foreach ($this->params as $param => $value) {                if (!$this->{$value} || empty($this->{$value})) {                    continue;                }                /** Загрузка цен */                if ( $param != 'PRICE_ACTIVE' && preg_match('/^PRICE/xi', $param) ) {                    if ( $param == 'PRICE_BASE' )                        $param = 'PRICE_SHOPANDSHOW';                    if ( !$shopProduct->setPriceTypeValue(str_replace('PRICE_', '', $param), $this->{$value}) )                        echo ('Не могу записать цену'.json_encode($cmsContentElement->attributes)."\n");                    continue;                }//                $property = $cmsContentElement->relatedPropertiesModel->getRelatedProperty($param);                if ( $property === null )                    continue;//                    throw new \skeeks\cms\Exception($param);                if (in_array($property->component, ['skeeks\cms\relatedProperties\propertyTypes\PropertyTypeList',])) {                    if ($enum = $property->getEnums()->andWhere(['value' => $this->{$value}])->one()) {                    } else {                        $enum = new CmsContentPropertyEnum();                        $enum->value = $this->{$value};                        $enum->property_id = $property->id;                        $enum->save();                    }                    if ($enum && !$enum->isNewRecord) {                        $cmsContentElement->relatedPropertiesModel->setAttribute($param, (string) $enum->id);                        $cmsContentElement->relatedPropertiesModel->save();                    }//                    if ( $param == 'SIZE_CLOTHES' ) {//////                        $propValue = $property->getEnums()->andWhere(['value' => $this->{$value}])->one();//                        throw new \skeeks\cms\Exception(json_encode([$enum->attributes]));//////                    }                } elseif (in_array($property->component, ['skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement',])) {                    $cmsContent = CmsContent::find()                        ->andWhere('code = :code', [':code' => $param])                        ->limit(1)                        ->one();                    if (!$cmsContent) {                        throw new Exception('Нет справочника же!');                    }                    $cmsContentProperty = CmsContentElement::find()                        ->andWhere(['content_id' => $cmsContent->id])                        ->andWhere(['code' => $this->{$value}])                        ->orWhere(['name' => $this->{$value}])                        ->limit(1)                        ->one();                    if ( $cmsContentProperty === null )                        continue;                    $cmsContentElement->relatedPropertiesModel->setAttribute($param, (string) $cmsContentProperty->id );                    $cmsContentElement->relatedPropertiesModel->save();                    continue;                }            }            if ($shopProduct->save()) {//                var_dump('ShopProduct saved');            } else {//                var_dump('ShopProduct not saved');            }        }    }    /**     * @return null|ShopContentElement     */    public function getCmsContentElementOffer()    {        $cmsContent = ShopContentElement::find()            ->andWhere(['bitrix_id' => $this->column0])            ->joinWith('cmsContent as ccontent')            ->andWhere(['ccontent.code' => 'productChild'])            ->limit(1)            ->one();//        echo($cmsContent->prepare(Yii::$app->db->queryBuilder)->createCommand()->rawSql);//        exit();        if (!$cmsContent) {            /**             * @var $elementPropertyParent CmsContentElementProperty             */            $parentElement = ShopContentElement::find()//                ->joinWith('relatedElementProperties map')//                ->joinWith('relatedElementProperties.property property')//                ->andWhere(['property.code' => 'BITRIX_PRODUCT_ID'])                ->andWhere(['bitrix_id' => $this->column9])                ->joinWith('cmsContent as ccontent')                ->andWhere(['ccontent.code' => 'product'])                ->limit(1)                ->one();            if (!$parentElement) {                return null;            }            //Иначе создадим            $cmsContent = new ShopContentElement();            $cmsContent->tree_id = $this->column1; //Каталог            $cmsContent->content_id = ImportStockSaleV2::CONTENT_OFFERS_ID; //Тип контента            $cmsContent->name = html_entity_decode($this->column3);            $cmsContent->parent_content_element_id = $parentElement->id;            $cmsContent->active = ($this->column2) ? Cms::BOOL_Y : Cms::BOOL_N;            $cmsContent->bitrix_id = $this->column0;            if ($cmsContent->save()) {//                $cmsContent->relatedPropertiesModel->setAttribute('BITRIX_PRODUCT_ID', (string)$this->column0);//                $cmsContent->relatedPropertiesModel->save();            } else {                echo ("Not created offer: " . json_encode($cmsContent->getFirstErrors()));            }        }        return $cmsContent;    }    public function setParams($parameters)    {        $params = [];        foreach ($parameters as $parameter => $value) {            $params[$parameter] = str_replace('PROPERTY_', '', $value);        }        $this->params = array_flip($params);    }    /**     * @return CmsTree     */    public function getPidCmsTree()    {        if (isset(self::$categories[$this->column1])) {            return self::$categories[$this->column1];        } else {            $tree = CmsTree::find()                ->joinWith('relatedElementProperties map')                ->joinWith('relatedElementProperties.property property')                ->andWhere(['property.code' => 'vendorid'])                ->andWhere(['map.value' => $this->column1])//            ->joinWith('treeType as ttype')//            ->andWhere(['ttype.code' => 'catalog'])                ->limit(1)                ->one();            if ($tree) {                return self::$categories[$this->column1] = $tree->id;            }        }        return null;    }}