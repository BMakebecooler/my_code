<?namespace console\models\sas;use common\models\cmsContent\CmsContent;use common\models\cmsContent\CmsContentProperty;use console\models\imports\ImportProductProperties;use skeeks\cms\components\Cms;use skeeks\cms\Exception;/** * @property string $column0 //BITRIX_PRODUCT_PROPERTY_ID * @property string $column1 //NAME * @property string $column2 //ACTIVE * @property string $column3 //CODE * @property string $column4 //TYPE * @property string $column5 //LIST_TYPE * @property string $column6 //BITRIX_LINKED_IBLOCK_ID * @property string $column7 //DEFAULT_VALUE * @property string $column8 //MULTIPLE * @property string $column9 //SEARCHABLE * @property string $column10 //FILTRABLE * @property string $column11 //REQUIRED * @property string $column12 //HINT * * Class ProductPropertyModel * @package console\models\sas */class ProductPropertyModel extends ImportModel{    const TYPE_STRING = 'S';    const TYPE_NUMBER = 'N';    const TYPE_ELEMENT = 'E';    const TYPE_LIST = 'L';    const TYPE_FILE = 'F';    const TREE_TYPE_PRODUCT_PROPERTIES_ID = 2;    const TREE_TYPE_PRODUCT_SALE_PROPERTIES_ID = 10;    public function getPropertyCode($contentId)    {        return CmsContentProperty::find()            ->andWhere(['code' => $this->code])            ->andWhere(['content_id' => $contentId])            ->one();    }    /**     * Получить тип свойства     * @return string     */    public function getType()    {        $firstSym = @substr($this->column4, 0, 1);        return $firstSym;    }    /**     * Получить код свойства     * @return string     */    public function getCode()    {        return $this->column3;        return str_replace([            '_'        ], '', $this->column3);    }    /**     * Признак строкового типа     * @return bool     */    public function isComponentString()    {        return $this->type === self::TYPE_STRING;    }    /**     * Признак числового типа     * @return bool     */    public function isComponentNumber()    {        return $this->type === self::TYPE_NUMBER;    }    /**     * Признак типа для хранения элементов     * @return bool     */    public function isComponentElement()    {        return $this->type === self::TYPE_ELEMENT;    }    /**     * Признак типа для хранения листов     * @return bool     */    public function isComponentList()    {        return $this->type === self::TYPE_LIST;    }    /**     * Признак типа для файлов     * @return bool     */    public function isComponentFile()    {        return $this->type === self::TYPE_FILE;    }    public function getContentId()    {        return ImportProductProperties::TREE_TYPE_ID;    }    /**     * Сохранение свойства     * @param int $contentId     * @return bool     */    public function saveProperty($contentId = self::TREE_TYPE_PRODUCT_PROPERTIES_ID)    {        if (!$property = $this->getPropertyCode($contentId)) {            $property = new CmsContentProperty();        }        $property->content_id = $contentId;        $property->vendor_id = $this->column0;        $property->name = $this->column1;        $property->active = $this->column2;        $property->code = $this->getCode();        $property->property_type = $this->getType();        $property->multiple = $this->column8;        $property->searchable = $this->column9;        $property->filtrable = $this->column10;        $property->is_required = 'N';        $property->hint = $this->column12;        $time = time();        $property->created_at = $time;        $property->updated_at = $time;        $property->created_by = 1;        $property->updated_by = 1;        $property->list_type = 'L';        if ($this->isComponentString()) {            $property->component = 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeText';            $property->property_type = self::TYPE_STRING;        }        if ($this->isComponentNumber()) {            $property->component = 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeNumber';            $property->property_type = self::TYPE_NUMBER;        }        if ($this->isComponentElement()) {            $property->component = 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement';            $property->property_type = self::TYPE_ELEMENT;            /** @var CmsContent $dict */            $dict = CmsContent::find()                ->andWhere(['code'=>$property->code])                ->limit(1)                ->one();            if ($dict === null)                return;//                throw new Exception('Сначала заполните Справочник '.$property->code);            $_componentSettings = unserialize('a:7:{s:4:"code";s:1:"E";s:4:"name";s:36:"Привязка к элементу";s:12:"fieldElement";s:6:"select";s:10:"content_id";s:2:"80";s:2:"id";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:8:"property";a:15:{s:6:"active";s:1:"Y";s:8:"priority";s:3:"500";s:13:"property_type";s:1:"S";s:9:"list_type";s:1:"L";s:8:"multiple";s:1:"N";s:10:"searchable";s:1:"N";s:9:"filtrable";s:1:"N";s:7:"version";i:1;s:15:"smart_filtrable";s:1:"N";s:11:"is_required";s:0:"";s:4:"name";s:4:"test";s:4:"code";s:5:"rrrrr";s:9:"component";s:62:"skeeks\cms\relatedProperties\propertyTypes\PropertyTypeElement";s:4:"hint";s:0:"";s:10:"content_id";s:2:"10";}s:10:"activeForm";N;}');            $_componentSettings['content_id'] = $dict->id;            $_componentSettings['property']['name'] = $property->name;            $_componentSettings['property']['code'] = $property->code;            $_componentSettings['property']['content_id'] = $property->content_id;            $property->component_settings = serialize($_componentSettings);        }        if ($this->isComponentList()) {            $property->component = 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeList';            $property->property_type = self::TYPE_LIST;        }        if ($this->isComponentFile()) {            $property->component = 'skeeks\cms\relatedProperties\propertyTypes\PropertyTypeFile';            $property->property_type = self::TYPE_FILE;        }        if ($property->save()) {            return true;        } else {            var_dump($property->content_id);            var_dump($property->code);            var_dump($property->getErrors());            die();            return false;        }    }    /**     * Добавить новое свойство     * @param array $property     * @return bool     */    public function addNewProperty(array $property)    {        $cmsContentProperty = CmsContentProperty::find()            ->andWhere(['content_id' => $property['content_id']])            ->andWhere(['code' => $property['code']])            ->limit(1)            ->one();        if (!$cmsContentProperty) {            $cmsContentProperty = new CmsContentProperty();            $cmsContentProperty->content_id = $property['content_id'];            $cmsContentProperty->code = $property['code'];            $cmsContentProperty->name = $property['name'];            $cmsContentProperty->property_type = $property['property_type'];            $cmsContentProperty->list_type = $property['list_type'];            $cmsContentProperty->is_required = $property['is_required'];            $cmsContentProperty->multiple = @$property['multiple'];            $cmsContentProperty->component = $property['component'];            $cmsContentProperty->component_settings = $property['component_settings'];            return $cmsContentProperty->save();        } else {            return false;        }    }}