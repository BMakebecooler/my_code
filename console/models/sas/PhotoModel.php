<?namespace console\models\sas;use common\models\ImportStockSaleV2;use Exception;use skeeks\cms\components\Cms;use skeeks\cms\models\CmsContentElement;use skeeks\cms\models\CmsContentElementProperty;use skeeks\cms\models\CmsContentPropertyEnum;use skeeks\cms\models\CmsTree;use skeeks\cms\shop\models\ShopCmsContentElement;use skeeks\cms\shop\models\ShopProduct;use Yii;/** * @property string column0  "iblock_element_id" * @property string column1  "code" * @property string column2  "URL" * @property string column3  "timestamp_x" * * Class PhotoModel * @package console\models\sas */class PhotoModel extends ImportModel{    private static $products = [];    public function addPhoto()    {        $cmsContentElement = $this->getCmsContentElementProduct();        if ($cmsContentElement) {            $realUrl = $this->column2;            $dateTime = strtotime($this->column3);            try {                if ($this->isMainPhoto()) {                    if ($image = $cmsContentElement->image) {                        //Если дата создания не изменилась то ничего не делаем, иначе удаляем и загружаем новый файл                        if ($image->created_at <= $dateTime) {                            return false;                        } else {                            $image->delete();                        }                    }                } elseif ($this->isAdditionalPhoto()) {                    /*if ($images = $cmsContentElement->images) {                        foreach ($images as $image) {                            if ($image->created_at <= $dateTime) {                                return false;                            } else {                                $image->delete();                            }                        }                    }*/                }                $file = \Yii::$app->storage->upload($realUrl, [                    'name' => $cmsContentElement->name,                    'updated_at' => $this->column3,                    'original_name' => $realUrl,                ]);                if ($this->isMainPhoto()) {                    $cmsContentElement->link('image', $file);                } elseif ($this->isAdditionalPhoto()) {                    /** Если у товара еще нет основного фото - прикрепить первое из дополнительных фото на место главного */                    if ( $cmsContentElement->image === null )                        $cmsContentElement->link('image', $file);                    $cmsContentElement->link('images', $file);                }            } catch (\Exception $e) {                $message = 'Not upload image to: ' . $cmsContentElement->id . " ({$realUrl})";                var_dump($message);                var_dump($e->getMessage());            }        }        return $cmsContentElement;    }    /**     * Признак главной фотки     * @return bool     */    protected function isMainPhoto()    {        return $this->column1 === 'MAIN_PHOTO';    }    protected function isAdditionalPhoto()    {        return $this->column1 === 'PHOTOS';    }    /**     * @return array|null|\yii\db\ActiveRecord|ShopCmsContentElement|bool     */    public function getCmsContentElementProduct()    {        if (isset(self::$products[$this->column0])) {            return self::$products[$this->column0];        } else {            $cmsContent = ShopCmsContentElement::find()                ->joinWith('image image')//                ->joinWith('images images')//                ->joinWith('relatedElementProperties map')//                ->joinWith('relatedElementProperties.property property')                ->joinWith('cmsContent as ccontent')//                ->andWhere(['property.code' => 'BITRIX_PRODUCT_ID'])                ->andWhere(['bitrix_id' => $this->column0])                ->andWhere(['ccontent.code' => 'product'])                ->limit(1)                ->one();            return self::$products[$this->column0] = (($cmsContent) ? : false);            if ($cmsContent) {                return self::$products[$this->column0] = $cmsContent;            }        }        return null;    }}